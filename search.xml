<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[一张图解读什么是数字签名、数字证书、https原理]]></title>
      <url>http://www.bluestroy.com/2016/12/07/%E4%B8%80%E5%BC%A0%E5%9B%BE%E8%A7%A3%E8%AF%BB%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E3%80%81%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6%E3%80%81https%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<p>数字签名和数字证书是什么？ https是如果实现加密传输的？<br><a id="more"></a></p>
<p><img src="http://obmxnha1c.bkt.clouddn.com/cxQkK" alt="Untitled Image"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[sublime中添加groovy编译功能]]></title>
      <url>http://www.bluestroy.com/2016/11/05/sublime%E4%B8%AD%E6%B7%BB%E5%8A%A0groovy%E7%BC%96%E8%AF%91%E5%8A%9F%E8%83%BD/</url>
      <content type="html"><![CDATA[<p>新建一个文件名字可以叫做<code>groovy.sublime-build</code>，  <a id="more"></a><br>里面 写入内容：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"cmd"</span>:[<span class="string">"groovy.bat"</span>,<span class="string">"$file"</span>]</div><div class="line">    <span class="string">"selector"</span>:<span class="string">"source.groovy"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>保存在\Sublime Text 2\Packages\Groovy文件夹中即可。  </p>
<p><strong>selector属性作用：</strong><br>sublime的编译定制文件，添加selecotr属性，可以使编译只针对后缀为groovy的文件执行。<br>之后，如果设置tools-&gt;build system&gt; Automatic，运行时就会根据后缀名自动选择一个定制文件自动执行，而不需要再手动选择groovy了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[grails开发之解决cookie中文报错]]></title>
      <url>http://www.bluestroy.com/2016/11/05/grails%E5%BC%80%E5%8F%91%E4%B9%8B%E8%A7%A3%E5%86%B3cookie%E4%B8%AD%E6%96%87%E6%8A%A5%E9%94%99/</url>
      <content type="html"><![CDATA[<p>Version 0 cookie values are restrictive in allowed characters. It only allows URL-safe characters. This covers among others the alphanumeric characters (a-z, A-Z and 0-9) and only a few lexical characters, including -, _, ., ~ and %. All other characters are invalid in version 0 cookies.  </p>
<p>使用java的URLEncoder和URLDecoder.  <a id="more"></a></p>
<p>Your best bet is to URL-encode those characters. This way every character which is not allowed in URLs will be percent-encoded in this form %xx which is valid as cookie value.<br>So, when creating the cookie do:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Cookie cookie = <span class="keyword">new</span> Cookie(name, URLEncoder.encode(value, <span class="string">"UTF-8"</span>));<span class="comment">// ...</span></div></pre></td></tr></table></figure></p>
<p>And when reading the cookie, do:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String value = URLDecoder.decode(cookie.getValue(), <span class="string">"UTF-8"</span>);/</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[grails开发之mysql数据库保存emoji表情设置编码为utf8mb4]]></title>
      <url>http://www.bluestroy.com/2016/11/05/grails%E5%BC%80%E5%8F%91%E4%B9%8Bmysql%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BF%9D%E5%AD%98emoji%E8%A1%A8%E6%83%85%E8%AE%BE%E7%BD%AE%E7%BC%96%E7%A0%81%E4%B8%BAutf8mb4/</url>
      <content type="html"><![CDATA[<p>grails开发时，遇到了mysql数据库保存emoji表情的场景，如数据表需要保存微信昵称的字段。 那么一般的utf8格式是保存不下emoji表情的，导致存储的表情都是乱码的。因为emoji表情占四个字节，而utf8最多三个字节，使用utf8mb4字符集可以保存四个字节。 <a id="more"></a></p>
<h4 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h4><ol>
<li>将mysql数据表中的相应字段设置为utf8mb4格式。</li>
<li><p>修改application.yml文件，将连接数据库的配置最后面的characterEncoding=UTF-8去掉。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">url:</span> <span class="string">jdbc:</span><span class="string">mysql:</span><span class="comment">//139.196.184.225:3306/fashion_development?useUnicode=true</span></div></pre></td></tr></table></figure>
</li>
<li><p>设置mysql数据库编码为utf8mb4  </p>
<ul>
<li>查看mysql数据库编码格式<code>show variables like &#39;char%&#39;</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show variables like &apos;char%&apos;;</div><div class="line">+--------------------------+----------------------------+</div><div class="line">| Variable_name            | Value                      |</div><div class="line">+--------------------------+----------------------------+</div><div class="line">| character_set_client     | utf8                       |</div><div class="line">| character_set_connection | utf8                       |</div><div class="line">| character_set_database   | latin1                     |</div><div class="line">| character_set_filesystem | binary                     |</div><div class="line">| character_set_results    | utf8                       |</div><div class="line">| character_set_server     | latin1                     |</div><div class="line">| character_set_system     | utf8                       |</div><div class="line">| character_sets_dir       | /usr/share/mysql/charsets/ |</div><div class="line">+--------------------------+----------------------------+</div><div class="line">8 rows in set (0.00 sec)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<p>发现character_set_database和character_set_server的编码都是拉丁文 latin1。要改为utf8mb4。<br>修改编码如下，<code>/etc/mysql/my.cnf</code>在各项后面添加如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[client]default-character-set = utf8mb4</div><div class="line">//[mysql]default-character-set = utf8mb4</div><div class="line">[mysqld]</div><div class="line">character-set-server = utf8mb4</div><div class="line">collation-server = utf8mb4_unicode_ci</div></pre></td></tr></table></figure></p>
<p>重启mysql，检查编码设置成功：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show variables like &apos;char%&apos;;</div><div class="line">+--------------------------+----------------------------+</div><div class="line">| Variable_name            | Value                      |</div><div class="line">+--------------------------+----------------------------+</div><div class="line">| character_set_client     | utf8                       |</div><div class="line">| character_set_connection | utf8                       |</div><div class="line">| character_set_database   | utf8mb4                    |</div><div class="line">| character_set_filesystem | binary                     |</div><div class="line">| character_set_results    | utf8                       |</div><div class="line">| character_set_server     | utf8mb4                    |</div><div class="line">| character_set_system     | utf8                       |</div><div class="line">| character_sets_dir       | /usr/share/mysql/charsets/ |</div><div class="line">+--------------------------+----------------------------+</div><div class="line">8 rows in set (0.00 sec)</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[groovy时间日期库TimeCategory]]></title>
      <url>http://www.bluestroy.com/2016/11/05/groovy%E6%97%B6%E9%97%B4%E6%97%A5%E6%9C%9F%E5%BA%93TimeCategory/</url>
      <content type="html"><![CDATA[<p>Java中的时间日期操作用过的都觉得复杂，但在进行grails开发，使用Groovy中的时间日期操作就特别简单：  <a id="more"></a></p>
<p>例如：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">use (groovy.time.TimeCategory) &#123;</div><div class="line">     <span class="comment">// application on numbers:</span></div><div class="line">     println <span class="number">1.</span>minute.from.now</div><div class="line">     println <span class="number">10.</span>hours.ago</div><div class="line"></div><div class="line">     <span class="comment">// application on dates</span></div><div class="line">     <span class="keyword">def</span> someDate = <span class="keyword">new</span> Date()</div><div class="line">     println someDate - <span class="number">3.</span>months</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[grails 开发之固定内容转换显示，如单选按钮等]]></title>
      <url>http://www.bluestroy.com/2016/11/05/grails%E5%BC%80%E5%8F%91%E4%B9%8B%E5%9B%BA%E5%AE%9A%E5%86%85%E5%AE%B9%E8%BD%AC%E6%8D%A2%E6%98%BE%E7%A4%BA%EF%BC%8C%E5%A6%82%E5%8D%95%E9%80%89%E6%8C%89%E9%92%AE%E7%AD%89/</url>
      <content type="html"><![CDATA[<p>grails开发中如果有固定内容的对应转换显示需求的，可以考虑在i18n文件里面添加内容。  <a id="more"></a><br>如：在<code>messages_zh_CN.properties</code>文件里面添加：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">order.status<span class="number">.1</span>=正常</div><div class="line">order.status<span class="number">.2</span>=取消</div></pre></td></tr></table></figure></p>
<p>那么，在gsp文件中可以使用<code>&lt;g:message /&gt;</code>标签引用，例子如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"td_status_$&#123;it.id&#125;"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">g:message</span> <span class="attr">code</span>=<span class="string">"order.status.$&#123;id.status&#125;"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[grails开发之logback配置]]></title>
      <url>http://www.bluestroy.com/2016/11/05/grails%E5%BC%80%E5%8F%91%E4%B9%8Blogback%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>在grails开发中使用logback的配置。只需要在logback.groovy文件的root下面，添加如下几行logger：  <a id="more"></a></p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root(ERROR,[<span class="string">'STDOUT'</span>])</div><div class="line"><span class="comment">//添加如下logger，要对应到每个最终的文件夹下</span></div><div class="line">logger(<span class="string">"grails.app.controllers.fashion.controller"</span>, DEBUG, [<span class="string">'STDOUT'</span>], <span class="literal">false</span>)</div><div class="line">logger(<span class="string">"grails.app.controllers.fashion.shop"</span>, DEBUG, [<span class="string">'STDOUT'</span>], <span class="literal">false</span>)</div><div class="line">logger(<span class="string">"grails.app.domain.fashion.domain"</span>, DEBUG, [<span class="string">'STDOUT'</span>], <span class="literal">false</span>)</div><div class="line">logger(<span class="string">"grails.app.services.fashion"</span>, DEBUG, [<span class="string">'STDOUT'</span>], <span class="literal">false</span>)</div></pre></td></tr></table></figure>
<p>然后在对应的文件夹下的congroller、service等文件中就可以直接使用<code>log.debug(&quot;info&quot;)</code>的方法在控制台输出信息。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ssh-copy-id命令实现ssh远程连接免密]]></title>
      <url>http://www.bluestroy.com/2016/11/05/ssh-copy-id%E5%91%BD%E4%BB%A4%E5%AE%9E%E7%8E%B0ssh%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E5%85%8D%E5%AF%86/</url>
      <content type="html"><![CDATA[<p>ssh-copy-id命令可以将本地主机的公钥复制到远程主机的authorized_keys文件上，ssh-copy-id命令也会给远程主机的用户主目录（home）和<code>~/.ssh</code>，和<code>~/.ssh/authorized_keys</code>设置合适的权限。  <a id="more"></a></p>
<p><strong>语法：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-copy-id [-i [identity_file]] [user@]machine</div></pre></td></tr></table></figure></p>
<p>-i: 指定公钥文件  </p>
<p><strong>实例：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ssh-copy-id user@server</div><div class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub user@server</div></pre></td></tr></table></figure></p>
<p><img src="http://obmxnha1c.bkt.clouddn.com/vIVV4" alt="Untitled Image"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo的Next主题之让你的博客嗨起来~]]></title>
      <url>http://www.bluestroy.com/2016/11/04/Hexo%E7%9A%84Next%E4%B8%BB%E9%A2%98%E4%B9%8B%E8%AE%A9%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%97%A8%E8%B5%B7%E6%9D%A5/</url>
      <content type="html"><![CDATA[<h3 id="让博客High起来"><a href="#让博客High起来" class="headerlink" title="让博客High起来"></a>让博客High起来</h3><p>效果很赞，整个页面的不同部分渐进式摇摆，摇摆摇摆，当然，还有Music。<br><a id="more"></a><br>只要在<code>..\themes\next\layout\_partials\header.swig</code>中的ul标签下添加如下代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"menu-item"</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">title</span>=<span class="string">"嗨起来~"</span> <span class="attr">href</span>=<span class="string">'javascript:(function() &#123;</span></span></div><div class="line">    function c() &#123;</div><div class="line">        var e = document.createElement("link");</div><div class="line">        e.setAttribute("type", "text/css");</div><div class="line">        e.setAttribute("rel", "stylesheet");</div><div class="line">        e.setAttribute("href", f);</div><div class="line">        e.setAttribute("class", l);</div><div class="line">        document.body.appendChild(e)</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    function h() &#123;</div><div class="line">        var e = document.getElementsByClassName(l);</div><div class="line">        for (var t = 0; t &lt; e.length; t++) &#123;</div><div class="line">            document.body.removeChild(e[t])</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    function p() &#123;</div><div class="line">        var e = document.createElement("div");</div><div class="line">        e.setAttribute("class", a);</div><div class="line">        document.body.appendChild(e);</div><div class="line">        setTimeout(function() &#123;</div><div class="line">            document.body.removeChild(e)</div><div class="line">        &#125;, 100)</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    function d(e) &#123;</div><div class="line">        return &#123;</div><div class="line">            height : e.offsetHeight,</div><div class="line">            width : e.offsetWidth</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    function v(i) &#123;</div><div class="line">        var s = d(i);</div><div class="line">        return s.height &gt; e &amp;&amp; s.height &lt; n &amp;&amp; s.width &gt; t &amp;&amp; s.width &lt; r</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    function m(e) &#123;</div><div class="line">        var t = e;</div><div class="line">        var n = 0;</div><div class="line">        while (!!t) &#123;</div><div class="line">            n += t.offsetTop;</div><div class="line">            t = t.offsetParent</div><div class="line">        &#125;</div><div class="line">        return n</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    function g() &#123;</div><div class="line">        var e = document.documentElement;</div><div class="line">        if (!!window.innerWidth) &#123;</div><div class="line">            return window.innerHeight</div><div class="line">        &#125; else if (e &amp;&amp; !isNaN(e.clientHeight)) &#123;</div><div class="line">            return e.clientHeight</div><div class="line">        &#125;</div><div class="line">        return 0</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    function y() &#123;</div><div class="line">        if (window.pageYOffset) &#123;</div><div class="line">            return window.pageYOffset</div><div class="line">        &#125;</div><div class="line">        return Math.max(document.documentElement.scrollTop, document.body.scrollTop)</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    function E(e) &#123;</div><div class="line">        var t = m(e);</div><div class="line">        return t &gt;= w &amp;&amp; t &lt;= b + w</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    function S() &#123;</div><div class="line">        var e = document.createElement("audio");</div><div class="line">        e.setAttribute("class", l);</div><div class="line">        e.src = i;</div><div class="line">        e.loop = false;</div><div class="line">        e.addEventListener("canplay", function() &#123;</div><div class="line">            setTimeout(function() &#123;</div><div class="line">                x(k)</div><div class="line">            &#125;, 500);</div><div class="line">            setTimeout(function() &#123;</div><div class="line">                N();</div><div class="line">                p();</div><div class="line">                for (var e = 0; e &lt; O.length; e++) &#123;</div><div class="line">                    T(O[e])</div><div class="line">                &#125;</div><div class="line">            &#125;, 15500)</div><div class="line">        &#125;, true);</div><div class="line">        e.addEventListener("ended", function() &#123;</div><div class="line">            N();</div><div class="line">            h()</div><div class="line">        &#125;, true);</div><div class="line">        e.innerHTML = " &lt;p&gt;If you are reading this, it is because your browser does not support the audio element. We recommend that you get a new browser.&lt;/p&gt; &lt;p&gt;";</div><div class="line">        document.body.appendChild(e);</div><div class="line">        e.play()</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    function x(e) &#123;</div><div class="line">        e.className += " " + s + " " + o</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    function T(e) &#123;</div><div class="line">        e.className += " " + s + " " + u[Math.floor(Math.random() * u.length)]</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    function N() &#123;</div><div class="line">        var e = document.getElementsByClassName(s);</div><div class="line">        var t = new RegExp("\\b" + s + "\\b");</div><div class="line">        for (var n = 0; n &lt; e.length; ) &#123;</div><div class="line">            e[n].className = e[n].className.replace(t, "")</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    var e = 30;</div><div class="line">    var t = 30;</div><div class="line">    var n = 350;</div><div class="line">    var r = 350;</div><div class="line">    var i = "//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake.mp3";</div><div class="line">    var s = "mw-harlem_shake_me";</div><div class="line">    var o = "im_first";</div><div class="line">    var u = ["im_drunk", "im_baked", "im_trippin", "im_blown"];</div><div class="line">    var a = "mw-strobe_light";</div><div class="line">    var f = "//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake-style.css";</div><div class="line">    var l = "mw_added_css";</div><div class="line">    var b = g();</div><div class="line">    var w = y();</div><div class="line">    var C = document.getElementsByTagName("*");</div><div class="line">    var k = null;</div><div class="line">    for (var L = 0; L &lt; C.length; L++) &#123;</div><div class="line">        var A = C[L];</div><div class="line">        if (v(A)) &#123;</div><div class="line">            if (E(A)) &#123;</div><div class="line">                k = A;</div><div class="line">                break</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    if (A === null) &#123;</div><div class="line">        console.warn("Could not find a node of the right size. Please try a different page.");</div><div class="line">        return</div><div class="line">    &#125;</div><div class="line">    c();</div><div class="line">    S();</div><div class="line">    var O = [];</div><div class="line">    for (var L = 0; L &lt; C.length; L++) &#123;</div><div class="line">        var A = C[L];</div><div class="line">        if (v(A)) &#123;</div><div class="line">            O.push(A)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)()    '&gt;High一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="http://obmxnha1c.bkt.clouddn.com/dMZ7C" alt="Untitled Image"></p>
<p><em>想给博客添加音乐看这里<a href="http://www.tuicool.com/articles/NneMnuF" target="_blank" rel="external">玩转hexo博客之next</a></em></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[面试小知识点]]></title>
      <url>http://www.bluestroy.com/2016/10/13/%E9%9D%A2%E8%AF%95%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      <content type="html"><![CDATA[<h3 id="TCP和UDP的区别："><a href="#TCP和UDP的区别：" class="headerlink" title="TCP和UDP的区别："></a>TCP和UDP的区别：</h3><ol>
<li>TCP传输控制协议，UDP用户数据包协议，都是传输层协议。</li>
<li>TCP面向连接，UDP无连接</li>
<li>TCP传输可靠，UDP传输不可靠，可能会丢包</li>
<li>TCP传输速度慢，UDP传输速度快</li>
<li>TCP保证数据正确性和数据的顺序，UDP可能丢包，不保证顺序</li>
<li>UDP数据包结构简单，对系统资源要求少<a id="more"></a></li>
</ol>
<h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3><h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><p>一种流量控制技术</p>
<ul>
<li>滑动窗口协议</li>
<li>停等协议（1比特滑动窗口协议）：发送窗口=接收窗口=1</li>
<li>后退n协议：发送窗口&gt;1，接收窗口=1</li>
<li>选择重传协议：要求接收方有足够大的缓冲区空间，发送窗口&gt;1，接收窗口&gt;1<br><strong>窗口</strong>：连接建立时，各端分配一块缓冲区用来存储接收的数据，并将缓冲区的尺寸发送给另一端。<br>接收方发送的确认信息中包含了自己剩余的缓冲区尺寸。<br>剩余缓冲区空间的数量叫做 窗口。  </li>
</ul>
<h3 id="长连接和短连接"><a href="#长连接和短连接" class="headerlink" title="长连接和短连接"></a>长连接和短连接</h3><h3 id="Http-301-和-302区别"><a href="#Http-301-和-302区别" class="headerlink" title="Http 301 和 302区别"></a>Http 301 和 302区别</h3><p>301，302 都是HTTP状态的编码，都代表着某个URL发生了转移，不同之处在于：<br>301 redirect: 301 代表永久性转移(Permanently Moved)。<br>302 redirect: 302 代表暂时性转移(Temporarily Moved)。<br>302可能会发生<strong>网址劫持</strong>。从定义来说，从网址A做一个302重定向到网址B时，主机服务器的隐含意思是网址A随时有可能改主意，重新显示本身的内容或转向其他的地方。  </p>
<blockquote>
<p>一个不道德的人在他自己的网址A做一个302重定向到你的网址B，出于某种原因， Google搜索结果所显示的仍然是网址A，但是所用的网页内容却是你的网址B上的内容，这种情况就叫做网址URL劫持。你辛辛苦苦所写的内容就这样被别人偷走了。</p>
</blockquote>
<h3 id="Volatile-变量"><a href="#Volatile-变量" class="headerlink" title="Volatile 变量"></a>Volatile 变量</h3><p>Volatile 变量具有 synchronized 的可见性特性，但是<strong>不具备原子特性</strong>。这就是说线程能够自动发现 volatile 变量的最新值。Volatile 变量可用于提供线程安全，但是只能应用于非常有限的一组用例：多个变量之间或者某个变量的当前值与修改后值之间没有约束。因此，单独使用 volatile 还不足以实现计数器、互斥锁或任何具有与多个变量相关的不变式（Invariants）的类（例如 “start &lt;=end”）。</p>
<h3 id="从任务中产生返回值"><a href="#从任务中产生返回值" class="headerlink" title="从任务中产生返回值"></a>从任务中产生返回值</h3><p>Runnable是执行工作的独立任务，但是它不返回任何值。如果要完成任务时能够返回一个值，那么可以实现Callable接口而不是Runnable接口。在Java SE5中引入的Callable是一种具有参数类型的泛型，他的类型参数表示是从方法call()中返回的值，并且必须使用ExecutorService.submit()方法调用它。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaskWithResult</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt;</span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">	...</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span></span>&#123;</div><div class="line">    	<span class="keyword">return</span> <span class="string">"result of TaskWithResult"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableDemo</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">    	ExecutorService exec = Executors.newCachedThreadPool();</div><div class="line">    	Future&lt;String&gt; fs = exec.submit(<span class="keyword">new</span> TaskWithREsult(<span class="number">3</span>));</div><div class="line">        System.out.println(fs.get());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>submit()方法会产生Future对象，他用Callable返回结果的特定类型进行了参数化，可以调用isDone()方法来查询Future是否已经完成。当任务完成时，它具有一个结果，你可以调用get()方法获取该结果。也可以不用isDone检查就直接调用get，这个get可能会阻塞，直到结果准备就绪。</p>
<h3 id="原子类"><a href="#原子类" class="headerlink" title="原子类"></a>原子类</h3><p>java.util.concurrent.atomic<br>Java SE5引入了注入AtomicInteger、AtomicLong、AtomicReference等特殊的原子性变量类。（机器级别的原子性），对常规编程来说，很少会派上用场，但涉及性能调优，它们就大有用武之地了。<br>Atomic类被设计用来构建java.util.concurrent中的类，因此只有在特殊情况下才在自己的代码中使用它们，即便使用了也需要确保不存在其他可能出现的问题。通常依赖于锁要更安全一下，（要么是synchronized关键字，要么是显示的Lock对象）。</p>
<blockquote>
<p>其基本的特性就是在多线程环境下，当有多个线程同时执行这些类的实例包含的方法时，具有排他性，即当某个线程进入方法，执行其中的指令时，不会被其他线程打断，而别的线程就像自旋锁一样，一直等到该方法执行完成，才由JVM从等待队列中选择另一个线程进入，这只是一种逻辑上的理解。实际上是借助硬件的相关指令来实现的，不会阻塞线程(或者说只是在硬件级别上阻塞了)</p>
</blockquote>
<h3 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h3><blockquote>
<p><em>阻塞队列:BlockingQueue</em><br>如果BlockingQueue是空的,从BlockingQueue取东西的操作将会被阻断进入等待状态,直到BlockingQueue进了东西才会被唤醒.同样,如果BlockingQueue是满的,任何试图往里存东西的操作也会被阻断进入等待状态,直到BlockingQueue里有空间才会被唤醒继续操作.<br>java.util.concurrent.BlockingQueue<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">BlockingQueue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedBlockingQueue&lt;Integer&gt;();</div></pre></td></tr></table></figure></p>
</blockquote>
<p><a href="http://tonl.iteye.com/blog/1936391" target="_blank" rel="external">使用Java的BlockingQueue实现生产者-消费者</a>;</p>
<h3 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h3><p>ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。<br>ZooKeeper的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。<br>ZooKeeper包含一个简单的原语集，提供Java和C的接口。</p>
<h3 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h3><p>Netty是由JBOSS提供的一个java开源框架。Netty提供异步的、事件驱动的网络应用程序框架和工具，用以快速开发高性能、高可靠性的网络服务器和客户端程序。<br>也就是说，Netty 是一个基于NIO的客户，服务器端编程框架，使用Netty 可以确保你快速和简单的开发出一个网络应用，例如实现了某种协议的客户，服务端应用。Netty相当简化和流线化了网络应用的编程开发过程，例如，TCP和UDP的socket服务开发。</p>
<h3 id="前缀树（Trie树、字典树、单词查找树）"><a href="#前缀树（Trie树、字典树、单词查找树）" class="headerlink" title="前缀树（Trie树、字典树、单词查找树）"></a>前缀树（Trie树、字典树、单词查找树）</h3><p>Trie树，又称单词查找树、字典树，是一种树形结构，是一种哈希树的变种，是一种用于快速检索的多叉树结构。典型应用是用于统计和排序大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。它的优点是：最大限度地减少无谓的字符串比较，查询效率比哈希表高。（lgN，普通排序是NlgN）<br>核心思想：空间换时间<br><a href="http://blog.csdn.net/hguisu/article/details/8131559" target="_blank" rel="external"> Trie树：应用于统计和排序</a><br><a href="https://segmentfault.com/a/1190000005810561" target="_blank" rel="external">Trie树结构</a>  </p>
<h2 id="关于数据库的锁"><a href="#关于数据库的锁" class="headerlink" title="关于数据库的锁"></a>关于数据库的锁</h2><h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p>悲观锁(Pessimistic Lock), 顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。</p>
<h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>乐观锁(Optimistic Lock), 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，这样可以提高吞吐量，像数据库如果提供类似于write_condition机制的其实都是提供的乐观锁。</p>
<h3 id="悲观锁和乐观锁比较"><a href="#悲观锁和乐观锁比较" class="headerlink" title="悲观锁和乐观锁比较"></a>悲观锁和乐观锁比较</h3><p>两种锁各有优缺点，不可认为一种好于另一种，像乐观锁适用于写比较少的情况下，即冲突真的很少发生的时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。但如果经常产生冲突，上层应用会不断的进行retry，这样反倒是降低了性能，所以这种情况下用悲观锁就比较合适。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring IOC、Bean、AOP、代理、事务机制理解]]></title>
      <url>http://www.bluestroy.com/2016/10/13/Spring-IOC%E3%80%81Bean%E3%80%81AOP%E3%80%81%E4%BB%A3%E7%90%86%E3%80%81%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h3 id="Spring-Bean的两种实现方式："><a href="#Spring-Bean的两种实现方式：" class="headerlink" title="Spring Bean的两种实现方式："></a>Spring Bean的两种实现方式：</h3><ol>
<li>xml配置</li>
<li>注解</li>
</ol>
<p>Bean Factory提供配置结构和基本功能，加载并初始化Bean.<br>ApplicationContext保存了Bean对象并在Spring中被广泛使用。  <a id="more"></a></p>
<h3 id="IOC和DI"><a href="#IOC和DI" class="headerlink" title="IOC和DI"></a>IOC和DI</h3><p><img src="http://obmxnha1c.bkt.clouddn.com/9XIFv" alt="Untitled Image"><br><img src="http://obmxnha1c.bkt.clouddn.com/hKjhG" alt="Untitled Image">  </p>
<h4 id="Spring-注入"><a href="#Spring-注入" class="headerlink" title="Spring 注入"></a>Spring 注入</h4><p><strong>Spring注入是指</strong>在启动Spring容器加载Bean配置的时候（扫描Bean的配置，为这些Bean进行实例化，创建bean），在创建的过程中完成<strong>对成员变量的赋值行为</strong>。<br>常用的两种注入方式：</p>
<ul>
<li>设值注入 <bean><property></property></bean></li>
<li>构造注入 <bean><constructor-arg></constructor-arg></bean></li>
</ul>
<h3 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h3><ul>
<li>定义 xml中配置</li>
<li>初始化 1.init-method 2.实现InitializingBean afterPropertiesSet()  实现接口的方法优先执行</li>
<li>使用   getBean(“xxx”);</li>
<li>销毁 1.distroy-method  2.DisposableBean  destroy()  </li>
</ul>
<p>schema中配置default-init-method / default-destroy-method<br>三种方法同时使用时，默认的不执行，其他两种都执行，实现接口的方式先于配置init-method  </p>
<h3 id="Bean的自动装配"><a href="#Bean的自动装配" class="headerlink" title="Bean的自动装配"></a>Bean的自动装配</h3><p>不用配置Property、constructor-arg等属性。<br>schema中配置属性default-autowire=”ByName”<br>byType按照class属性类 类型实例化<br>constructor 自动找到构造方法装配。  </p>
<h3 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h3><ol>
<li>Singleton: 单例，指一个Bean容器中只存在一份</li>
<li>prototype：每次请求（每次使用）创建新的实例，destroy方式不生效。  </li>
<li>request：每次http请求创建一个实例且仅在当前request内有效  </li>
<li>session：同上，每次http请求创建，当前session内有效 </li>
<li>global session：基于portlet的Web中有效（portlet定义了global session），如果是在web中，同session。  </li>
</ol>
<h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><ul>
<li>AOP（Aspect Oriented Programming）面向切面编程。通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。  </li>
<li><strong>主要功能</strong>：日志记录、性能统计、安全控制、事务处理、异常处理等。<br><img src="http://obmxnha1c.bkt.clouddn.com/QydOx" alt="Untitled Image"></li>
</ul>
<h3 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h3><p>允许用户定制自己的方面，已完成OOP与AOP的互补使用。<br><img src="http://obmxnha1c.bkt.clouddn.com/4sAeg" alt="Untitled Image">  </p>
<h4 id="Spring-AOP-实现"><a href="#Spring-AOP-实现" class="headerlink" title="Spring AOP 实现"></a>Spring AOP 实现</h4><p><strong>横切代码：</strong> 例如日志功能。日志代码往往水平地散布在所有对象层次中，而与它所散布到的对象的核心功能毫无关系。对于其他类型的代码，如安全性、异常处理和透明的持续性也是如此。这种散布在各处的无关的代码被称为横切（cross-cutting）代码。<em>AOP使用了横切技术</em><br><strong>实现：</strong> </p>
<ol>
<li>是采用动态代理技术，利用截取消息的方式，对该消息进行装饰，以取代原有对象行为的执行；</li>
<li>是采用静态织入的方式，引入特定的语法创建“方面”，从而使得编译器可以在编译期间织入有关“方面”的代码。   </li>
</ol>
<p><strong>AOP代理对象的生成：</strong> </p>
<ul>
<li>JDKProxy</li>
<li>CGLIB<br>默认使用Java SE动态代理作为AOP代理。  <h4 id="有接口和无接口的Spring-AOP实现区别"><a href="#有接口和无接口的Spring-AOP实现区别" class="headerlink" title="有接口和无接口的Spring AOP实现区别"></a>有接口和无接口的Spring AOP实现区别</h4></li>
</ul>
<ol>
<li>Spring AOP默认使用标准的Java SE动态代理作为AOP代理，这使得任何接口（或者接口集）都可以被代理。  </li>
<li>Spring AOP中也可以使用CGLIB代理（如果一个业务对象并没有实现一个接口）  <h4 id="AOP实现方式"><a href="#AOP实现方式" class="headerlink" title="AOP实现方式"></a>AOP实现方式</h4></li>
<li>预编译 -AspectJ</li>
<li>运行期动态代理（JDK动态代理、CGLib动态代理） -SpringAOP JbossAOP  </li>
</ol>
<h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p>代理是你为了提供额外的或不同的操作，而插入的用来代替“实际”对象的对象。这些操作通常涉及与“涉及“与实际对象的通信，因此代理通常充当着中间人的角色。<br>当你希望跟踪对RealObject中的方法的调用，或者希望度量这些调用的开销，那么肯定是不希望将这些代码合并到应用程序中的代码，这时候代理就可以很容易的添加或移除它们。  </p>
<h4 id="Java动态代理"><a href="#Java动态代理" class="headerlink" title="Java动态代理"></a>Java动态代理</h4><p>java的动态代理比代理的思想更向前迈进了一步。它可以动态地创建代理并动态地处理对所代理方法的调用。在动态代理上所做的所有调用都会被重定向到单一的调用处理器上，它的工作是揭示盗用的类型并确定相应的对策。<br><strong>动态代理：</strong> 可以提供对另一个对象的访问，同时隐藏实际对象的具体事实。代理一般会实现它所表示的实际对象的接口。代理可以访问实际对象，但是延迟实现实际对象的部分功能，实际对象实现系统的实际功能，代理对象对客户隐藏了实际对象。客户不知道它是与代理打交道还是与实际对象打交道。</p>
<blockquote>
<p>目前Java开发包中包含了对动态代理的支持，但是其实现只支持对接口的的实现。 其实现主要通过java.lang.reflect.Proxy类和java.lang.reflect.InvocationHandler接口。<br>Proxy类主要用来获取动态代理对象，InvocationHandler接口用来约束调用者实现</p>
</blockquote>
<p><em>参考<a href="http://www.cnblogs.com/linjiqin/archive/2011/02/18/1957600.html" target="_blank" rel="external">Java动态代理一——动态类Proxy的使用</a></em></p>
<h3 id="spring的事务管理机制"><a href="#spring的事务管理机制" class="headerlink" title="spring的事务管理机制"></a>spring的事务管理机制</h3><ol>
<li>声名式事务  <blockquote>
<p>Spring声明式事务让我们从复杂的事务处理中得到解脱。使得我们再也无需要去处理获得连接、关闭连接、事务提交和回滚等这些操作。再也无需要我们在与事务相关的方法中处理大量的try…catch…finally代码。我们在使用Spring声明式事务时，有一个非常重要的概念就是事务属性。事务属性通常由事务的传播行为，事务的隔离级别，事务的超时值和事务只读标志组成。我们在进行事务划分时，需要进行事务定义，也就是配置事务的属性。  </p>
</blockquote>
</li>
</ol>
<p>使用spring声明式事务，spring使用AOP来支持声明式事务，会根据事务属性，自动在方法调用之前决定是否开启一个事务，并在方法执行之后决定事务提交或回滚事务。  </p>
<ol>
<li>编程式事务（用到的不多） </li>
</ol>
<h3 id="事务的四个隔离级别"><a href="#事务的四个隔离级别" class="headerlink" title="事务的四个隔离级别"></a>事务的四个隔离级别</h3><ol>
<li>Read Uncommitted 读未提交数据；（可能脏读）</li>
<li>Read Committed 读已提交数据；</li>
<li>Repeatable Read 可重复读；</li>
<li>Serializable 串行化</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[找出数组中出现奇数次的数]]></title>
      <url>http://www.bluestroy.com/2016/10/09/%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E5%A5%87%E6%95%B0%E6%AC%A1%E7%9A%84%E6%95%B0/</url>
      <content type="html"><![CDATA[<p><strong>题目1：</strong><br>一个组数，只有1个数只出现了一次，其他所有数都是成对出现的。怎么找出这个数。<a id="more"></a></p>
<p><strong>分析：</strong><br>两层循环判断的时间复杂度和空间复杂度都太大，如何在尽可能小的时间、空间复杂度内找出这个数——使用异或位运算。  </p>
<ul>
<li>x^y^z=y^x^z</li>
<li>x^0=x</li>
<li>x^x=0<br>如果只有一个数出现一次，其他数出现两次，那么所有数异或的结果就是要找的数。有：<br>result=x^b^c^b^d^d^c=x  </li>
</ul>
<p><strong>代码实现：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> sum =<span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> a[]= &#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</div><div class="line">	sum^=a[i];</div><div class="line">	System.out.println(sum);</div><div class="line">&#125;</div><div class="line">System.out.println(sum);</div><div class="line"><span class="comment">// output: 5</span></div></pre></td></tr></table></figure></p>
<hr>
<p><strong>题目2：</strong><br>一个组数，只有两个数只出现了一次，其他所有数都是成对出现的。怎么找出这两个数。</p>
<p><strong>分析：</strong><br>所有数的异或结果中，在它的二进制表示中为0的位说明两个数在此位的二进制表示相同，同样的如果此位为1，说明两个数在此位的二进制不同。<br>方法： 只要我们把这组数分开，分为两组数（使这两个数在不同的组）再分别利用异或，就可以得那两个数。<br>找不同：异或按位操作是相同的为0 ，不同的为1，那么这两个数异或的结果转换成2进制时，低位出现第一个1是就可以区分他们了。</p>
<p><strong>代码实现：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> b[]= &#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</div><div class="line"><span class="keyword">int</span> res=<span class="number">0</span>;  <span class="comment">//总的异或结果</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j:b) &#123;</div><div class="line">    res^=j;</div><div class="line">&#125;</div><div class="line">String binaryResult = Integer.toBinaryString(res);</div><div class="line"><span class="comment">//index需要右移的位数</span></div><div class="line"><span class="keyword">int</span> index= binaryResult.length()-(binaryResult.lastIndexOf(<span class="string">"1"</span>)+<span class="number">1</span>);</div><div class="line"><span class="keyword">int</span> result1=<span class="number">0</span>,result2=<span class="number">0</span>;    <span class="comment">//两组分别异或的结果</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k: b)&#123;</div><div class="line">    <span class="keyword">if</span> (((k&gt;&gt;index)&amp;<span class="number">1</span>)==<span class="number">1</span>)&#123;</div><div class="line">        result1^=k;</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        result2^=k;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">System.out.println(<span class="string">"result1 = "</span> + result1);</div><div class="line">System.out.println(<span class="string">"result2 = "</span> + result2);</div></pre></td></tr></table></figure></p>
<p><strong>题目延伸：</strong><br>一个组数，只有1个数只出现了奇数次次，其他所有数都是成对出现的。<br><em>只要出现了奇数次都可以用这种方法</em></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JDK1.8-1.5新特性总结]]></title>
      <url>http://www.bluestroy.com/2016/10/09/JDK1-8-1-5%E6%96%B0%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h4 id="JDK1-8-新特性"><a href="#JDK1-8-新特性" class="headerlink" title="JDK1.8 新特性"></a>JDK1.8 新特性</h4><ol>
<li><p><strong>接口的默认方法</strong><br>一个非抽象的方法实现，只需要使用 default关键字即可，这个特征又叫做扩展方法<a id="more"></a></p>
</li>
<li><p><strong>lambda表达式</strong><br>由参数列表、箭头符号-&gt;和函数体组成</p>
</li>
<li><p>函数式接口<br>“函数式接口”是指仅仅只包含一个抽象方法的接口。只需要给你的接口添加 @FunctionalInterface 注解。</p>
</li>
<li><p><strong>方法和对象函数引用</strong><br>Java8 允许使用::关键字来传递方法或者构造函数的引用。</p>
</li>
<li><p>lambda直接访问外城的局部变量，无需声明final。</p>
</li>
<li><p>lambda可访问对象字段和静态变量</p>
</li>
<li><p>包java.time下包含了<strong>全新的时间日期API</strong>，与Joda-time相似而不同。</p>
</li>
</ol>
<h4 id="JDK1-7-新特性"><a href="#JDK1-7-新特性" class="headerlink" title="JDK1.7 新特性"></a>JDK1.7 新特性</h4><ol>
<li><p><strong>switch中可以使用字符串</strong></p>
</li>
<li><p><strong>泛型实例化自动推断</strong><br>List<string> tempList = new ArrayList&lt;&gt;();</string></p>
</li>
<li><p>语法上支持集合，并一定是数组<br>List<integer> digits =[1,2,3,4];</integer></p>
</li>
<li><p>新增取环境信息的方法<br>File System.getJavaIoTempDir()//IO临时文件夹<br>File System.getUserHomeDir()//当前用户目录<br>…</p>
</li>
<li><p>Boolean类型反转，空指针安全，参与位运算</p>
</li>
<li><p>两个Char间的equals<br>boolean Character.equalsIgnoreCase(char c1,char c2);</p>
</li>
<li><p>安全的加减乘除<br>int Math.safeAdd(int v1,int v2);</p>
</li>
<li><p>二进制字面量  </p>
</li>
<li>数字字面量可出现下划线</li>
<li>一个catch多个异常，用“|”隔开  </li>
<li>自定义自动关闭类<br>实现AutoCloseable接口  </li>
<li>try-witch-resources，可自动关闭资源</li>
</ol>
<h4 id="JDK1-6-新特性"><a href="#JDK1-6-新特性" class="headerlink" title="JDK1.6 新特性"></a>JDK1.6 新特性</h4><ol>
<li>Desktop类和SystemTray类 </li>
<li>STAX</li>
<li>轻量级Http Server API  </li>
<li>用Console开发控制程序</li>
<li>对脚本语言支持<br>…</li>
</ol>
<h4 id="JDK1-5-新特性"><a href="#JDK1-5-新特性" class="headerlink" title="JDK1.5 新特性"></a>JDK1.5 新特性</h4><ol>
<li><strong>泛型</strong></li>
<li><strong>foreach</strong></li>
<li><strong>自动拆箱装箱</strong> </li>
<li><strong>枚举</strong></li>
<li>静态导入（Static import）</li>
<li>元数据（Metadata）</li>
<li><strong>线程池</strong></li>
<li>Java Generics<br>创建一个明确只能存放某种特定类型对象的容器类实例。容器类型安全</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Redis+Protostuff 实现缓存对象]]></title>
      <url>http://www.bluestroy.com/2016/10/06/Redis-Protostuff%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<h3 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h3><p>Redis是一个开源的，先进的 key-value 存储可用于构建高性能，可扩展的 Web 应用程序的解决方案。<br>与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。<br><a id="more"></a></p>
<h4 id="Redis优点"><a href="#Redis优点" class="headerlink" title="Redis优点"></a>Redis优点</h4><ul>
<li><strong>异常快速 :</strong> Redis是非常快的，每秒可以执行大约110000设置操作，81000个/每秒的读取操作。</li>
<li><strong>支持丰富的数据类型 :</strong> Redis支持最大多数开发人员已经知道如列表，集合，可排序集合，哈希等数据类型。</li>
<li><strong>操作都是原子性的 :</strong> 所有 Redis 的操作都是原子，从而确保当两个客户同时访问 Redis 服务器得到的是更新后的值（最新值）。</li>
<li><strong>MultiUtility工具：</strong> Redis是一个多功能实用工具，可以在很多如：缓存，消息传递队列中使用（Redis原生支持发布/订阅），在应用程序中，如：Web应用程序会话，网站页面点击数等任何短暂的数据；</li>
</ul>
<blockquote>
<p><em>Redis不能直接保存Object（POJO），需要将Object序列化成Bytes[]进行缓存。</em></p>
</blockquote>
<h3 id="Protostuff简介"><a href="#Protostuff简介" class="headerlink" title="Protostuff简介"></a>Protostuff简介</h3><ul>
<li>Protostuff是一个开源的、基于Java语言的序列化库，它内建支持向前向后兼容（模式演进）和验证功能。  </li>
<li>Protostuff则是在protobuff基础上改进的一个优秀的高性能的序列化和反序列化框架。</li>
<li>Protostuff相对于Java内置的实现Serializable接口，其序列化和反序列化具有更快的速度和更小的空间。  </li>
</ul>
<p><em>Java序列化和反序列有很多开源框架，可移步github上<a href="https://github.com/eishay/jvm-serializers/wiki" target="_blank" rel="external">jvm-serializers对比分析</a>了解。</em></p>
<h3 id="Redis和Protostuff整合实现缓存"><a href="#Redis和Protostuff整合实现缓存" class="headerlink" title="Redis和Protostuff整合实现缓存"></a>Redis和Protostuff整合实现缓存</h3><p>下面的例子实现了对Seckill对象的超时（策略）缓存。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisDao</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> JedisPool jedisPool;    <span class="comment">//redis连接池</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisDao</span><span class="params">(String ip,<span class="keyword">int</span> port)</span></span>&#123;</div><div class="line">        jedisPool = <span class="keyword">new</span> JedisPool(ip,port);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</div><div class="line">    <span class="comment">//获取Seckill对象的sechema，sechema保存了类的属性等信息</span></div><div class="line">    <span class="keyword">private</span> RuntimeSchema&lt;Seckill&gt; schema = RuntimeSchema.createFrom(Seckill.class);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 从缓存中读取seckill对象</div><div class="line">     * <span class="doctag">@param</span> seckillId</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Seckill <span class="title">getSeckill</span><span class="params">(<span class="keyword">long</span> seckillId)</span></span>&#123;</div><div class="line">        <span class="comment">//redis逻辑操作</span></div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            <span class="comment">//使用了redis的客户端Jedis来操作缓存</span></div><div class="line">            Jedis jedis = jedisPool.getResource();</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                String key=<span class="string">"seckill:"</span>+seckillId;</div><div class="line">                <span class="comment">//redis并没有实现内部序列化操作</span></div><div class="line">                <span class="comment">//get-&gt;byte[]-&gt;反序列化-&gt;Object(Seckill)</span></div><div class="line">                <span class="comment">//采用自定义序列化:速度快、空间小</span></div><div class="line">                <span class="comment">//protostuff:pojo</span></div><div class="line">                <span class="keyword">byte</span>[] bytes = jedis.get(key.getBytes());</div><div class="line">                <span class="keyword">if</span> (bytes !=<span class="keyword">null</span>)&#123;</div><div class="line">                    Seckill seckill = schema.newMessage(); <span class="comment">//创建一个空对象</span></div><div class="line">                    ProtostuffIOUtil.mergeFrom(bytes,seckill,schema);<span class="comment">//反序列化</span></div><div class="line">                    <span class="keyword">return</span> seckill;</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">finally</span> &#123;</div><div class="line">                jedis.close();</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">            logger.error(e.getMessage(),e);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将数据放入redis缓存</div><div class="line">     * <span class="doctag">@param</span> seckill</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">putSeckill</span><span class="params">(Seckill seckill)</span></span>&#123;</div><div class="line">        <span class="comment">//set Object(Seckill) -&gt;序列化 -&gt; byte[]</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Jedis jedis = jedisPool.getResource();</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                String key =<span class="string">"seckill:"</span>+seckill.getSeckillId();</div><div class="line">                <span class="comment">//序列化，第三个参数是缓冲器</span></div><div class="line">                <span class="keyword">byte</span>[] bytes = ProtostuffIOUtil.toByteArray(seckill,schema, LinkedBuffer.allocate(LinkedBuffer.DEFAULT_BUFFER_SIZE));</div><div class="line">                <span class="comment">//超时缓存</span></div><div class="line">                <span class="keyword">int</span> timeout = <span class="number">60</span>*<span class="number">60</span>; <span class="comment">//1个小时</span></div><div class="line">                String result = jedis.setex(key.getBytes(),timeout,bytes);</div><div class="line">                <span class="keyword">return</span> result; <span class="comment">//"OK"</span></div><div class="line">            &#125;<span class="keyword">finally</span> &#123;</div><div class="line">                jedis.close();</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">            logger.error(e.getMessage(),e);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span>  <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的代码需要引入以下依赖包:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- redis 客户端  jedis--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- Protostuff序列化依赖--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyuproject.protostuff<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protostuff-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyuproject.protostuff<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protostuff-runtime<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[查看Linux中TCP连接数]]></title>
      <url>http://www.bluestroy.com/2016/10/05/%E6%9F%A5%E7%9C%8BLinux%E4%B8%ADTCP%E8%BF%9E%E6%8E%A5%E6%95%B0/</url>
      <content type="html"><![CDATA[<h4 id="查看哪些IP连接本机"><a href="#查看哪些IP连接本机" class="headerlink" title="查看哪些IP连接本机"></a>查看哪些IP连接本机</h4><p>netstat -an  <a id="more"></a></p>
<h4 id="查看TCP连接数"><a href="#查看TCP连接数" class="headerlink" title="查看TCP连接数"></a>查看TCP连接数</h4><ol>
<li><p>统计80端口连接数<br>netstat -nat|grep -i “80”|wc -l</p>
</li>
<li><p>统计httpd协议连接数<br>ps -ef|grep httpd|wc -l</p>
</li>
<li><p>统计已连接上的，状态为“established<br>netstat -na|grep ESTABLISHED|wc -l</p>
</li>
<li><p>查出哪个IP地址连接最多,将其封了.<br>netstat -na|grep ESTABLISHED|awk {print $5}|awk -F: {print $1}|sort|uniq -c|sort -r +0n<br>netstat -na|grep SYN|awk {print $5}|awk -F: {print $1}|sort|uniq -c|sort -r +0n</p>
</li>
</ol>
<hr>
<ol>
<li><p>查看apache当前并发访问数：<br>netstat -an | grep ESTABLISHED | wc -l<br>对比httpd.conf中MaxClients的数字差距多少。</p>
</li>
<li><p>查看有多少个进程数：<br>ps aux|grep httpd|wc -l</p>
</li>
<li><p>可以使用如下参数查看数据</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ps -ef|grep httpd|wc <span class="_">-l</span></div><div class="line">1388</div></pre></td></tr></table></figure>
</li>
</ol>
<p>统计httpd进程数，连个请求会启动一个进程，使用于Apache服务器。<br>表示Apache能够处理1388个并发请求，这个值Apache可根据负载情况自动调整。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ netstat -nat|grep -i <span class="string">"80"</span>|wc <span class="_">-l</span></div><div class="line">4341</div></pre></td></tr></table></figure></p>
<p>netstat -an会打印系统当前网络链接状态，而grep -i “80”是用来提取与80端口有关的连接的，wc -l进行连接数统计。<br>最终返回的数字就是当前所有80端口的请求总数。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ netstat -na|grep ESTABLISHED|wc <span class="_">-l</span></div><div class="line">376</div></pre></td></tr></table></figure>
<p>netstat -an会打印系统当前网络链接状态，而grep ESTABLISHED 提取出已建立连接的信息。 然后wc -l统计。<br>最终返回的数字就是当前所有80端口的已建立连接的总数。</p>
<p><code>netstat -nat | grep ESTABLISHED</code> 可查看所有建立连接的详细记录  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat -n | awk <span class="string">'/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;'</span></div></pre></td></tr></table></figure>
<p>查看Apache的并发请求数及其TCP连接状态.</p>
<blockquote>
<p>TIME_WAIT 8947 等待足够的时间以确保远程TCP接收到连接中断请求的确认<br>FIN_WAIT1 15 等待远程TCP连接中断请求，或先前的连接中断请求的确认<br>FIN_WAIT2 1 从远程TCP等待连接中断请求<br>ESTABLISHED 55 代表一个打开的连接<br>SYN_RECV 21 再收到和发送一个连接请求后等待对方对连接请求的确认<br>CLOSING 2 没有任何连接状态<br>LAST_ACK 4 等待原来的发向远程TCP的连接中断请求的确认  </p>
</blockquote>
<p><strong>TCP连接状态详解</strong><br>LISTEN： 侦听来自远方的TCP端口的连接请求<br>SYN-SENT： 再发送连接请求后等待匹配的连接请求<br>SYN-RECEIVED：再收到和发送一个连接请求后等待对方对连接请求的确认<br>ESTABLISHED： 代表一个打开的连接<br>FIN-WAIT-1： 等待远程TCP连接中断请求，或先前的连接中断请求的确认<br>FIN-WAIT-2： 从远程TCP等待连接中断请求<br>CLOSE-WAIT： 等待从本地用户发来的连接中断请求<br>CLOSING： 等待远程TCP对连接中断的确认<br>LAST-ACK： 等待原来的发向远程TCP的连接中断请求的确认<br>TIME-WAIT： 等待足够的时间以确保远程TCP接收到连接中断请求的确认<br>CLOSED： 没有任何连接状态  </p>
<hr>
<h4 id="wc-命令"><a href="#wc-命令" class="headerlink" title="wc 命令"></a>wc 命令</h4><blockquote>
<p>wc [-clw] [filename…]</p>
<ul>
<li>-c Bytes数</li>
<li>-l  行数（列数）</li>
<li>-w  字数</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ wc testfile testfile_1 testfile_2  <span class="comment">#统计三个文件的信息  </span></div><div class="line">3 92 598 testfile                    <span class="comment">#第一个文件行数为3、单词数92、字节数598  </span></div><div class="line">9 18 78 testfile_1                   <span class="comment">#第二个文件的行数为9、单词数18、字节数78  </span></div><div class="line">3 6 32 testfile_2                    <span class="comment">#第三个文件的行数为3、单词数6、字节数32  </span></div><div class="line">15 116 708 总用量                    <span class="comment">#三个文件总共的行数为15、单词数116、字节数708</span></div></pre></td></tr></table></figure>
<p><br><br><br></p>
<blockquote>
<p><em>内容多数转自<a href="https://my.oschina.net/u/1169079/blog/397705" target="_blank" rel="external">查看linux中的TCP连接数</a></em></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[递归——汉诺塔]]></title>
      <url>http://www.bluestroy.com/2016/10/05/%E9%80%92%E5%BD%92%E2%80%94%E2%80%94%E6%B1%89%E8%AF%BA%E5%A1%94/</url>
      <content type="html"><![CDATA[<p><strong>求有向图的所有拓扑序列：</strong><br>依次取只有出度的节点。列出所有可能的情况。<br><strong>二分查找的比较次数：</strong> 完全二叉树的高度为logN+1向下取整，高度即为比较的次数。<br><a id="more"></a></p>
<h2 id="汉诺塔游戏"><a href="#汉诺塔游戏" class="headerlink" title="汉诺塔游戏"></a>汉诺塔游戏</h2><p><strong>规则：</strong>  </p>
<ul>
<li>每次只能移动一个盘子</li>
<li>小盘子必须在大盘子上面</li>
</ul>
<h4 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h4><blockquote>
<p>设三个塔分别为A、B、C。   </p>
<ol>
<li>当A塔上有n个盘子时，先将A塔上编号1至n-1的盘子（共n-1个）移动到B塔上（借助C塔）  </li>
<li>然后将A塔上最大的n号盘子移动到C塔上  </li>
<li>最后将B塔上的n-1个盘子借助A塔移动到C塔上。<br>只有一个盘子时直接从A盘移到C盘。</li>
</ol>
</blockquote>
<p><strong>如何理解？</strong><br>该算法使用了递归。递归永远都那么<em>迷人</em>。可以这样理解：<br>假设已经有了这样的一个方法hanio()可以实现想要的功能，那么递归调用时就直接调用hanio()，而不需要去明白功能的细节，只需要在写方法的时候处理好递归可能终止的条件就可以了。<br>就比如下面的代码中的<code>hanoi(start,end,mid,n-1)</code>，我不需要知道到底是经过哪些步骤实现了将n-1个盘子从初始塔移动到借用塔上，我只需明白<code>hanoi()</code>是有这个功能的。于是，整个代码就显得那么简洁优雅。<br>而当程序运行时，所以的实现细节就都呈现在眼前了。</p>
<h4 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HanoiTower</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> start  初始塔</div><div class="line">     * <span class="doctag">@param</span> mid   借用塔</div><div class="line">     * <span class="doctag">@param</span> end   目标塔</div><div class="line">     * <span class="doctag">@param</span> n     盘子数</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hanoi</span><span class="params">(String start,String mid,String end, <span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">        <span class="comment">//只有一个盘子时直接将初塔上的盘子移动到目标塔</span></div><div class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</div><div class="line">            System.out.println(start+<span class="string">"-&gt;"</span>+end);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            hanoi(start,end,mid,n-<span class="number">1</span>);<span class="comment">//将初始塔的n-1个盘子借助目的塔移动到借用塔</span></div><div class="line">            System.out.println(start+<span class="string">"-&gt;"</span>+end);<span class="comment">//将剩下最大的盘移动到目标塔</span></div><div class="line">            hanoi(mid, start, end, n-<span class="number">1</span>);<span class="comment">//将借用塔上的n-1个盘子借用初始塔移动到目标塔</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        hanoi(<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="number">4</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h4><p>一共需要移动2^n-1步。<br>时间复杂度O(2^n)<br>空间复杂度O(n)</p>
<h2 id="折纸游戏"><a href="#折纸游戏" class="headerlink" title="折纸游戏"></a>折纸游戏</h2><p>（未完）</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[部署web项目 nginx+tomcat7+二级域名]]></title>
      <url>http://www.bluestroy.com/2016/10/05/%E9%83%A8%E7%BD%B2web%E9%A1%B9%E7%9B%AE-nginx-tomcat7-%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>记：</strong><br>完成了基于SpringMVC+Mybatis+redis的Java高并发（练手）项目之后，想把它（seckill）部署到自己的子域名上。<br>于是，开始了一系列的部署之旅。<a id="more"></a></p>
</blockquote>
<h3 id="添加子域名解析记录"><a href="#添加子域名解析记录" class="headerlink" title="添加子域名解析记录"></a>添加子域名解析记录</h3><p>首先，进入你的域名解析管理页面，添加A记录，如下：<br><img src="http://obmxnha1c.bkt.clouddn.com/XNlj3" alt="Untitled Image"></p>
<h3 id="服务器安装tomcat7-nginx-redis"><a href="#服务器安装tomcat7-nginx-redis" class="headerlink" title="服务器安装tomcat7+nginx+redis"></a>服务器安装tomcat7+nginx+redis</h3><p>本人服务器是Linux ubuntu 14.04，安装命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ apt-get update</div><div class="line">$ apt-get install tomcat7</div><div class="line">$ apt-get install nginx <span class="comment">#不指定版本的话好像默认版本较低</span></div><div class="line">$ apt-get install redis-server <span class="comment">#会默认安装redis-cli</span></div><div class="line">$ apt-get install mysql-server-5.6</div><div class="line">$ apt-get install mysql-client-5.6</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><h4 id="理解反向代理"><a href="#理解反向代理" class="headerlink" title="理解反向代理"></a>理解反向代理</h4><blockquote>
<p><strong><em>反向代理（Reverse Proxy）</em></strong>方式是指以代理服务器来接受Internet的连接请求，然后将请求转发给内部网络的服务器，并将从服务器上得到的结果返回给Internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。  </p>
</blockquote>
<p><strong>理解：</strong><br>反向代理方式实际上就是一台负责转发的代理服务器，看似充当了真正服务器的功能，但实际上并不是，代理服务器只是充当了转发的作用，并且从真正的（上游）服务器那里取得返回的数据。    </p>
<p>这样说，其实nginx完成的就是这样的工作。我们让nginx监听一个端口，譬如80端口，但实际上我们转发给在8080端口的tomcat，由它来处理真正的请求，当请求完成后，tomcat返回，但数据此时没直接返回，而是直接给nginx，由nginx进行返回，这里，我们会以为是nginx进行了处理，但实际上进行处理的是tomcat。  </p>
<p>于是，很多人就会想到，使用nginx处理用户请求的js、css、图片等静态资源，使用tomcat（servlet容器）处理如jsp等动态资源。nginx处理静态页面效率远高于tomcat，这样就能更好的提高并发处理性能。实际上，这种动静分离可以搭建高性能负载均衡的集群。  </p>
<h4 id="nginx虚拟主机配置"><a href="#nginx虚拟主机配置" class="headerlink" title="nginx虚拟主机配置"></a>nginx虚拟主机配置</h4><p>对于静态资源网站，nginx作为服务器直接处理，不需要转发：  </p>
<p>nginx的配置文件是<code>/etc/nginx/nginx.conf</code>，发现其中http下引入了<code>etc/nginx/sites-enabled/*</code>，那索性就把所有的虚拟主机都配置在<code>etc/nginx/sites-enabled/default</code>中，在其中添加如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">server &#123;  </div><div class="line">        listen 80;  <span class="comment">#监听端口</span></div><div class="line">        server_name resume.bluestroy.com; <span class="comment">#二级域名  </span></div><div class="line">  		root /opt/webapp/resume; <span class="comment">#项目路径</span></div><div class="line">        location / &#123;  <span class="comment"># /表示处理所有请求</span></div><div class="line">            try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ =404; </div><div class="line">        &#125;  </div><div class="line">        <span class="comment"># nginx还有很多其他属性，自行了解</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ nginx -t <span class="comment">#检查配置文件是否正确</span></div><div class="line">$ nginx <span class="_">-s</span> reload <span class="comment">#重新加载配置文件而不必重启</span></div></pre></td></tr></table></figure>
<p>配置完成后，浏览器直接输入子域名resume.bluestroy.com就可以访问到的我的简历项目（只有一个index.html）。</p>
<hr>
<h3 id="Nginx-Tomcat配置多个二级域名"><a href="#Nginx-Tomcat配置多个二级域名" class="headerlink" title="Nginx+Tomcat配置多个二级域名"></a>Nginx+Tomcat配置多个二级域名</h3><p>上面nginx添加了虚拟主机只能处理静态资源。那么下面就配置动态web项目的二级域名。</p>
<h4 id="配置nginx虚拟主机"><a href="#配置nginx虚拟主机" class="headerlink" title="配置nginx虚拟主机"></a>配置nginx虚拟主机</h4><p>在<code>etc/nginx/sites-enabled/default</code>中添加如下server.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">        listen 80;</div><div class="line">        server_name seckill.bluestroy.com;</div><div class="line">        <span class="comment"># tomcat7 处理动态请求</span></div><div class="line">        location / &#123;</div><div class="line">                proxy_pass http://seckill.bluestroy.com:8080; <span class="comment">#tomcat7端口</span></div><div class="line">                <span class="comment">#proxy_redirect off;</span></div><div class="line">                proxy_<span class="built_in">set</span>_header Host <span class="variable">$host</span>;</div><div class="line">                proxy_<span class="built_in">set</span>_header X-Real-IP <span class="variable">$remote_addr</span>;</div><div class="line">                proxy_<span class="built_in">set</span>_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="comment"># nginx直接寻找并加载静态资源</span></div><div class="line"><span class="comment">#       location ~ \.(html|js|css|png|jpg|jpeg|gif)$ &#123;</span></div><div class="line"><span class="comment">#              root /opt/webapp/seckill;</span></div><div class="line"><span class="comment">#     &#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的配置让tomcat处理了所有请求，要实现动静分离请自行了解。</p>
<h4 id="Tomcat7配置默认项目和虚拟目录"><a href="#Tomcat7配置默认项目和虚拟目录" class="headerlink" title="Tomcat7配置默认项目和虚拟目录"></a>Tomcat7配置默认项目和虚拟目录</h4><p>在 <code>/etc/tomcat7/server.xml</code>中增加如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"seckill.bluestroy.com"</span> <span class="attr">appBase</span>=<span class="string">"webapps"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span> <span class="attr">unpackWARs</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">""</span> <span class="attr">docBase</span>=<span class="string">"/opt/webapp/seckill"</span> <span class="attr">debug</span>=<span class="string">"0"</span> <span class="attr">reloadable</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>Host标签的name是子域名，与nginx中相同。appBase下的子目录会自动解压及加载部署。<br>Context表齐纳的path=””表示直接输入ip（域名）直接对应到项目根目录,docBase是项目的路径。</p>
<blockquote>
<p>这里没有把seckill项目放到tomcat7的webapps目录下，如果放到webapps下是，会造成seckill项目重复加载: </p>
<ol>
<li>Tomcat 会在启动时自动加载 appBase 指定目录下的所有合法工程；<br>2.由于同时又通过 Context 的docBase 属性设置了Tomcat 默认工程， 所以，指定的 seckill工程又会被加载一次<br>另外，若放到webapps目录下时，发现seckill.bluestroy.com/seckill/seckill/list 才能访问到，没有将seckill作为根目录导致xxx/seckill/list 404错误。<br><strong><em>因此，最好将自己的项目放到其他地方。</em></strong></li>
</ol>
</blockquote>
<h4 id="修改hosts文件"><a href="#修改hosts文件" class="headerlink" title="修改hosts文件"></a>修改hosts文件</h4><p><code>vi /etc/hosts</code>将<code>seckill.bluestroy.com</code>追加到127.0.0.1后面<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">127.0.0.1 	seckill.bluestroy.com</div></pre></td></tr></table></figure></p>
<h4 id="SUCCESS"><a href="#SUCCESS" class="headerlink" title="SUCCESS"></a>SUCCESS</h4><p>配置完成，重启tomcat7，重新加载nginx配置文件。浏览器访问 <a href="http://seckill.bluestroy.com" target="_blank" rel="external">http://seckill.bluestroy.com</a></p>
<p><img src="http://obmxnha1c.bkt.clouddn.com/F81yQ" alt="Untitled Image"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ACM-树的表示-缩进到广义表]]></title>
      <url>http://www.bluestroy.com/2016/09/29/ACM-%E6%A0%91%E7%9A%84%E8%A1%A8%E7%A4%BA-%E7%BC%A9%E8%BF%9B%E5%88%B0%E5%B9%BF%E4%B9%89%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h4 id="试题描述"><a href="#试题描述" class="headerlink" title="试题描述"></a>试题描述</h4><p><strong>Description:</strong><br>输入图的缩进表示，用1个空格缩进，请转换为广义表方式输出等价的树。<br><a id="more"></a><br>节点名可以是多个字符，不包括空格、逗号和圆括号</p>
<p><strong>Input</strong><br>输入图的缩进表示，用一个空格缩进</p>
<p><strong>Output</strong><br>请转换为广义表方式输出等价的树，用英文括号和逗号分隔。  </p>
<p><img src="http://obmxnha1c.bkt.clouddn.com/DDokd" alt="Untitled Image"></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><blockquote>
<p>b1：上一行的前缀空格数<br>b2：当前行的前缀空格数</p>
<ul>
<li>b2&gt;b1，则追加【(X】</li>
<li>b2==b1，则追加【,X】</li>
<li>b2&lt;b1，则先追加  b1-b2个【)】，再追加【,X】</li>
<li>b2为最后一行时，最后追加b2个【)】</li>
</ul>
</blockquote>
<h4 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line"></div><div class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">        Scanner cin = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        <span class="comment">//不知道怎么结束循环，输入0结束为了调试。</span></div><div class="line">        <span class="keyword">while</span> (!cin.hasNext(<span class="string">"0"</span>))&#123;</div><div class="line">            String a = cin.nextLine();</div><div class="line">            list.add(a);</div><div class="line">        &#125;</div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(); <span class="comment">//保存最后的结果</span></div><div class="line"></div><div class="line">        <span class="keyword">int</span> b1=<span class="number">0</span>;   <span class="comment">//保存上一行的前缀空格数</span></div><div class="line">        <span class="keyword">int</span> b2=<span class="number">0</span>;   <span class="comment">//保存当前行的前缀空格数</span></div><div class="line"></div><div class="line">        sb.append(list.get(<span class="number">0</span>)); <span class="comment">//一定有根节点，其前缀空格数为0，先保存进去</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">1</span>;i&lt;list.size();i++)&#123;   <span class="comment">//遍历每一个节点</span></div><div class="line">            b2=<span class="number">0</span>;</div><div class="line">            String str = list.get(i);</div><div class="line">            <span class="comment">//求出当前节点的前缀空格数，即b2</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> c : str.toCharArray())&#123;</div><div class="line">                <span class="keyword">if</span> (c ==<span class="string">' '</span>) b2++;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//为表示方便，用X表示当前节点的内容，即当前行的String</span></div><div class="line">            <span class="keyword">if</span> (b2&gt;b1)  <span class="comment">//b2&gt;b1，则追加【(X】</span></div><div class="line">                sb.append(<span class="string">"("</span>).append(str);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (b2==b1)    <span class="comment">//b2==b1，则追加【,X】</span></div><div class="line">                sb.append(<span class="string">","</span>).append(str);</div><div class="line">            <span class="keyword">else</span> &#123;          <span class="comment">//b2&lt;b1，则先追加  b1-b2个【)】，再追加【,X】</span></div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;b1-b2;j++)&#123;</div><div class="line">                    sb.append(<span class="string">")"</span>);</div><div class="line">                &#125;</div><div class="line">                sb.append(<span class="string">","</span>).append(str);</div><div class="line">            &#125;</div><div class="line">            b1 =b2;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//此时b2为最后一样的前缀空格数，最后追加b2个【)】</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;b2;j++)&#123;</div><div class="line">            sb.append(<span class="string">")"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//最后的最后，将所有的空格剔除掉。</span></div><div class="line">        System.out.println(sb.toString().replaceAll(<span class="string">" "</span>,<span class="string">""</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br>  </p>
<p><em>注：盛大游戏编程题之一</em></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java IO流总结]]></title>
      <url>http://www.bluestroy.com/2016/09/28/Java-IO%E6%B5%81%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h4 id="Java四个基本的抽象类"><a href="#Java四个基本的抽象类" class="headerlink" title="Java四个基本的抽象类"></a>Java四个基本的抽象类</h4><p><img src="http://obmxnha1c.bkt.clouddn.com/Dj77B" alt="Untitled Image"><br><a id="more"></a> </p>
<hr>
<h4 id="IO体系图："><a href="#IO体系图：" class="headerlink" title="IO体系图："></a>IO体系图：</h4><p><img src="http://obmxnha1c.bkt.clouddn.com/qf17S" alt="Untitled Image"><br><img src="http://obmxnha1c.bkt.clouddn.com/bcHre" alt="Untitled Image"><br><img src="http://obmxnha1c.bkt.clouddn.com/nvGaH" alt="Untitled Image"><br><img src="http://obmxnha1c.bkt.clouddn.com/9AJf9" alt="Untitled Image">  </p>
<hr>
<h4 id="上层流："><a href="#上层流：" class="headerlink" title="上层流："></a>上层流：</h4><blockquote>
<p>更高级的流，有更强的读写能力。上层流指向底层流。Java采用缓存技术将上层流和底层流链接。  </p>
</blockquote>
<ul>
<li>BufferedReader(Reader in);     &nbsp;&nbsp;//缓冲流</li>
<li>BufferedWriter(Writer out);</li>
<li>DataInputStream(InputString in);  &nbsp;&nbsp;//数据流</li>
<li>DataOutputStream(OutputString out); </li>
<li>ObjectInputStream(InputStream in); &nbsp;&nbsp;//对象流</li>
<li>ObjectOutputStream(OutputStream out); </li>
</ul>
<hr>
<h4 id="随机流"><a href="#随机流" class="headerlink" title="随机流"></a>随机流</h4><p><code>RandomAccessFile</code>既不是<code>InputStream</code>的子类，也不是<code>OutputSteam</code>的子类。其流的指向既可以作为流的源，也可以作为流的目的地。mode取<code>r</code>或<code>rw</code>。</p>
<ul>
<li>RandomAccessFile(String name, String mode);</li>
<li>RandomAccessFile(File file, String mode);</li>
</ul>
<p><strong>例： 将int数组写入tom.bat，然后倒序读出。</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">import java.io.*;</div><div class="line">public class Main&#123;</div><div class="line">	public static void main(String[] args)&#123;</div><div class="line">    	RandomAccessFile inAndOut = null;</div><div class="line">        int data[] = &#123;1,2,3,4,5,6,7,8,9,10&#125;;</div><div class="line">        try&#123;	</div><div class="line">        	inAndOut = new RandomAccessFile("tom.bat","rw);</div><div class="line">            for(int i=0;i&lt;data.length;i++)&#123;</div><div class="line">            	inAndOut.writeInt(data[i]);</div><div class="line">            &#125;</div><div class="line">            for(long i=data.length-1;i&gt;=0;i--)&#123;</div><div class="line">            	inAndOut.seek(i*4);</div><div class="line">                System.out.printf("\t%d",inAndOut.readInt());</div><div class="line">            &#125;</div><div class="line"> 			inAndOut.close();</div><div class="line">        &#125;catch(IOException e)&#123;&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">```  </div><div class="line"></div><div class="line">---</div><div class="line"></div><div class="line">#### 数组流  </div><div class="line">流的源和目标除了文件还可以是计算机内存。  </div><div class="line"></div><div class="line">**1. 字节数组流**  </div><div class="line">- ByteArrayInputStream(byte[] buf);</div><div class="line">- ByteArrayInputStream(byte[] buf, int offset, int length);</div><div class="line">- ByteArrayOutputStream();	//默认指向32字节缓冲区</div><div class="line">- ByteArrayOutputStream(int size);  </div><div class="line"></div><div class="line">**2.字符数组流**  </div><div class="line">`CharArrayReader`和`CharArrayWriter`与字节数组流对应。  </div><div class="line"></div><div class="line">---  </div><div class="line"></div><div class="line">#### 文件锁  </div><div class="line"></div><div class="line">``` java</div><div class="line">// 1.读写属性必须是rw</div><div class="line">RandomAccessFile input = new RandomAccessFile("Example.java","rw");  </div><div class="line">// 2.获得连接到底层文件的信道</div><div class="line">FileChannel channel = input.getChannel();</div><div class="line">// 3.对文件加锁</div><div class="line">FileLock lock = channel.tryLock();</div><div class="line">// 4.释放文件锁</div><div class="line">lock .release();</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="序列化与对象克隆"><a href="#序列化与对象克隆" class="headerlink" title="序列化与对象克隆"></a>序列化与对象克隆</h3><p><strong>克隆对象：</strong> 复制品实体的变化不会引起原对象实体发生变化。<em>（区别于引用赋值）</em> </p>
<blockquote>
<p>使用对象流容易获取一个序列化对象的可偶那个，只需将该对象写入对象输出流指向的目的地，然后将该目的地作为一个对象输入流的源，那么该对象输入流从元中都会的文件一定是原对象的一个克隆。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">TV a = <span class="keyword">new</span> TV();	<span class="comment">//TV已实现了序列化</span></div><div class="line"><span class="comment">//写入序列化对象</span></div><div class="line">ByteArrayOutputStream outByte = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">ObjectOutputStream objOut = <span class="keyword">new</span> ObjectOutputStream(outByte);</div><div class="line">objOut.writeObject(a);</div><div class="line">objOut.close();</div><div class="line"><span class="comment">//读取序列化对象</span></div><div class="line">ByteArrayInputStream inByte = <span class="keyword">new</span> ByteArrayInputStream(outByte.toByteArray());</div><div class="line">ObjectInputStream objIn = <span class="keyword">new</span> ObjectInputStream(inByte);</div><div class="line">TV b = (TV)objIn.readObject();</div><div class="line">objIn.close();</div></pre></td></tr></table></figure>
<hr>
<h4 id="I-O流设计模式"><a href="#I-O流设计模式" class="headerlink" title="I/O流设计模式"></a>I/O流设计模式</h4><p><strong>装饰模式</strong>在Java语言中最著名的应用莫过于Java I/O标准为库的设计了。  </p>
<p>Java I/O库需要很多性能的各种组合，如果说这些性能的组合是通过继承方式来实现的话，那么每一种组合都需要一个类，这样就会出现大量重复性问题的出现，从而使类数目“爆炸”。而如果采用装饰模式，那么不仅类的数目大减少了，性能的重复也可以减至到最少。所以装饰模式是Java I/O库的基本模式。  </p>
<p>由于装饰模式的引用，造成了灵活性和复杂都大大增加了，我们在使用Java I/O库时，必须理解Java I/O库是由一些基本的原始流处理器和围绕它们的装饰流处理器所组成的，这样可以在学习和使用Java I/O库时达到事半功倍的效果。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[字符串反转的N种方法]]></title>
      <url>http://www.bluestroy.com/2016/09/24/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8D%E8%BD%AC%E7%9A%84N%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>如题：<a id="more"></a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.bluestroy.string;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Stack;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Troy on 2016/9/24.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 字符串反转的n种方法</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringReverse</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">reverse1</span><span class="params">(String s)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StringBuilder(s).reverse().toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">reverse2</span><span class="params">(String s)</span></span>&#123;</div><div class="line">        <span class="keyword">char</span>[] arr = s.toCharArray();</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> j= s.length()-<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (;i&lt;j;i++,j--)&#123;</div><div class="line">            arr[i] = (<span class="keyword">char</span>)(arr[i]^arr[j]);</div><div class="line">            arr[j]=(<span class="keyword">char</span>)(arr[j]^arr[i]);</div><div class="line">            arr[i]=(<span class="keyword">char</span>)(arr[i]^arr[j]);</div><div class="line">        &#125;</div><div class="line">        System.out.println(arr);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(arr);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">reverse3</span><span class="params">(String s)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> length = s.length();</div><div class="line">        <span class="keyword">if</span>(length&lt;=<span class="number">1</span>) <span class="keyword">return</span> s;</div><div class="line">        String left = s.substring(<span class="number">0</span>,length/<span class="number">2</span>);</div><div class="line">        String right = s.substring(length/<span class="number">2</span>,length);</div><div class="line">        <span class="keyword">return</span> reverse3(right)+reverse1(left);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">reverse4</span><span class="params">(String s)</span></span>&#123;</div><div class="line">        <span class="keyword">char</span>[] arr = s.toCharArray();</div><div class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;Character&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : arr) &#123;</div><div class="line">            stack.push(c);</div><div class="line">        &#125;</div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="comment">/* error!</span></div><div class="line">        Iterator it = stack.iterator();</div><div class="line">        while (it.hasNext()) &#123;</div><div class="line">            sb.append(it.next());</div><div class="line">            System.out.println(sb.toString());</div><div class="line">        &#125;*/</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</div><div class="line">            sb.append(stack.pop());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">reverse5</span><span class="params">(String s)</span></span>&#123;</div><div class="line">        <span class="keyword">char</span>[] arr = s.toCharArray();</div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=arr.length-<span class="number">1</span>; i&gt;=<span class="number">0</span>;i--)&#123;</div><div class="line">            sb.append(arr[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">reverse6</span><span class="params">(String s)</span></span>&#123;</div><div class="line">        String str = <span class="string">""</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;s.length();i++)&#123;</div><div class="line">            str = s.charAt(i)+str;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> str;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        String str = <span class="string">"hello world"</span>;</div><div class="line">        System.out.println(reverse1(str));</div><div class="line">        System.out.println(reverse2(str));</div><div class="line">        System.out.println(reverse3(str));</div><div class="line">        System.out.println(reverse4(str));</div><div class="line">        System.out.println(reverse5(str));</div><div class="line">        System.out.println(reverse6(str));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构面试题之字符串系列]]></title>
      <url>http://www.bluestroy.com/2016/09/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B3%BB%E5%88%97/</url>
      <content type="html"><![CDATA[<h3 id="求字符串最后一个单词的长度"><a href="#求字符串最后一个单词的长度" class="headerlink" title="求字符串最后一个单词的长度"></a>求字符串最后一个单词的长度</h3><p>下面两种方法一看就懂：<a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 求一个字符串的最后一个单词的长度</div><div class="line"> * <span class="doctag">@param</span> s</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLastWord</span><span class="params">(String s)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(s==<span class="keyword">null</span> &amp;&amp; s.length()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> i=s.length()-<span class="number">1</span>;</div><div class="line">    <span class="comment">//寻找第一个不为‘ ’的字符</span></div><div class="line">    <span class="keyword">for</span> (;i&gt;=<span class="number">0</span>;i--)&#123;</div><div class="line">        <span class="keyword">if</span> (s.charAt(i)==<span class="string">' '</span>);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//确定最后一个单词</span></div><div class="line">    <span class="keyword">for</span> (;i&gt;=<span class="number">0</span>;i--)&#123;</div><div class="line">        <span class="keyword">if</span> (s.charAt(i) ==<span class="string">' '</span>)<span class="keyword">break</span>;</div><div class="line">        <span class="keyword">else</span> count++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> count;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 求一个字符串的最后一个单词的长度</div><div class="line"> * <span class="doctag">@param</span> s</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLastWord2</span><span class="params">(String s)</span></span>&#123;</div><div class="line">    String str[] = s.split(<span class="string">"\\s"</span>);</div><div class="line">    <span class="keyword">return</span> str[str.length-<span class="number">1</span>].length();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="同分异构体（Anagram）"><a href="#同分异构体（Anagram）" class="headerlink" title="同分异构体（Anagram）"></a>同分异构体（Anagram）</h3><p>给定字符串s和字符串t，判断t是否为s的Anagram。  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 判断两个字符串是否是同分异构体</div><div class="line"> * <span class="doctag">@param</span> s</div><div class="line"> * <span class="doctag">@param</span> t</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAnagram</span><span class="params">(String s,String t)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> &amp;&amp; t== <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (s ==<span class="keyword">null</span> &amp;&amp; t!=<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (s != <span class="keyword">null</span> &amp;&amp; t== <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (s.length()!=t.length()) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">char</span> [] sArray = s.toCharArray();</div><div class="line">        <span class="keyword">char</span> [] tArray = t.toCharArray();</div><div class="line">        Arrays.sort(sArray);</div><div class="line">        Arrays.sort(tArray);</div><div class="line">        <span class="keyword">return</span> Arrays.equals(sArray,tArray);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 判断两个字符串是否是同分异构体法2，此法只考虑小写字母</div><div class="line"> * <span class="doctag">@param</span> s</div><div class="line"> * <span class="doctag">@param</span> t</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAnagram2</span><span class="params">(String s, String t)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> &amp;&amp; t== <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (s ==<span class="keyword">null</span> &amp;&amp; t!=<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (s != <span class="keyword">null</span> &amp;&amp; t== <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (s.length() != t.length()) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="comment">//此方法只考虑了只有小写字母，故设数组长度为26</span></div><div class="line">        <span class="keyword">int</span> twentySix = <span class="number">26</span>;</div><div class="line">        <span class="keyword">int</span> n = s.length();</div><div class="line">        <span class="keyword">int</span>[] sTable = <span class="keyword">new</span> <span class="keyword">int</span>[twentySix];</div><div class="line">        <span class="keyword">int</span>[] tTable = <span class="keyword">new</span> <span class="keyword">int</span>[twentySix];</div><div class="line">        <span class="comment">//用hash表的思想统计每个字母出现的次数</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</div><div class="line">            sTable[s.charAt(i)-<span class="string">'a'</span>]++;</div><div class="line">            tTable[s.charAt(i)-<span class="string">'a'</span>]++;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//如果每个字母出现的次数都相同，返回true，否则返回false。</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;twentySix;i++)</div><div class="line">            <span class="keyword">if</span> (sTable[i]!=tTable[i])</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="反转单词顺序"><a href="#反转单词顺序" class="headerlink" title="反转单词顺序"></a>反转单词顺序</h3><p>输入一个英文句子，反转句子中单词的顺序，要求单词内部不变。<br>假设只含字母、空格，首位没有空格。<br><strong>思路：</strong> 先反转每一个单词，在反转整个句子。<br><img src="http://obmxnha1c.bkt.clouddn.com/3ETFm" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 反转句子中单词的顺序，要求单词内部不变。</div><div class="line"> * <span class="doctag">@param</span> s 要反转的字符数组</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverseWords</span><span class="params">(<span class="keyword">char</span>[] s)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> &amp;&amp; s.length ==<span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> n = s.length;</div><div class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> j;</div><div class="line">    <span class="keyword">while</span> (i&lt;n)&#123;</div><div class="line">        j=i;</div><div class="line">        <span class="comment">//找到要反转的单词的第一个字母下标i和最后一个字母下标j</span></div><div class="line">        <span class="keyword">while</span> (j&lt;n)&#123;</div><div class="line">            <span class="keyword">if</span> (s[j]==<span class="string">' '</span>) <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">else</span> j++;</div><div class="line">        &#125;</div><div class="line">        reverse(s,i,j-<span class="number">1</span>);</div><div class="line">        <span class="comment">//跳过空格</span></div><div class="line">        <span class="keyword">while</span> (j&lt;n &amp;&amp; s[j]==<span class="string">' '</span>) j++;</div><div class="line">        <span class="comment">//继续进行下一个单词</span></div><div class="line">        i=j;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//最后反转整个句子</span></div><div class="line">    reverse(s,<span class="number">0</span>,n-<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 调用String api实现反转句子中单词的顺序</div><div class="line"> * <span class="doctag">@param</span> s</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">reverseWords2</span><span class="params">(String s)</span></span>&#123;</div><div class="line">    String [] strArray = s.split(<span class="string">"\\s"</span>);</div><div class="line">    StringBuilder result= <span class="keyword">new</span> StringBuilder();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = strArray.length-<span class="number">1</span>;i&gt;<span class="number">0</span>;i--)&#123;</div><div class="line">        result.append(strArray[i]+<span class="string">" "</span>);</div><div class="line">    &#125;</div><div class="line">    result.append(strArray[<span class="number">0</span>]);</div><div class="line">    <span class="keyword">return</span> result.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="数一数读一读"><a href="#数一数读一读" class="headerlink" title="数一数读一读"></a>数一数读一读</h3><blockquote>
<p>“1211”，有1个1、1个2、2个1，所以下一个字符串为“111221”；<br>“111221”，有3个1、2个2、1个1，所以下一个字符串为“312211”。<br>统计每个数字出现的次数，并把本次得到的结果字符串作为下一次的当前字符串。<br>如此循环往复，那么执行n次之后是什么？</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">countAndSay</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">	        <span class="keyword">if</span>(n&lt;=<span class="number">0</span>)&#123;</div><div class="line">	        	<span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">	        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</div><div class="line">	        	<span class="keyword">return</span> <span class="string">"1"</span>;</div><div class="line">	        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>)&#123;</div><div class="line">	        	<span class="keyword">return</span> <span class="string">"11"</span>;</div><div class="line">	        &#125;<span class="keyword">else</span>&#123;</div><div class="line">	        	String str=<span class="string">"11"</span>;</div><div class="line">	        	StringBuilder sb=<span class="keyword">new</span> StringBuilder();</div><div class="line">	        	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=n;i++)&#123;</div><div class="line">	        		<span class="keyword">char</span> temp=str.charAt(<span class="number">0</span>);</div><div class="line">	        		<span class="keyword">int</span> count=<span class="number">1</span>;</div><div class="line">	        		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;str.length();j++)&#123;</div><div class="line">	        			<span class="keyword">if</span>(str.charAt(j)==temp)&#123;</div><div class="line">	        				count++;</div><div class="line">	        			&#125;<span class="keyword">else</span>&#123;</div><div class="line">	        				sb.append(count).append(temp);</div><div class="line">	        				count=<span class="number">1</span>;</div><div class="line">	        				temp=str.charAt(j);</div><div class="line">	        			&#125;</div><div class="line">	        		&#125;</div><div class="line">	        		sb.append(count).append(temp);</div><div class="line">	        		str=sb.toString();</div><div class="line">	        		sb.delete(<span class="number">0</span>, sb.length());</div><div class="line">	        	&#125;</div><div class="line">	        	<span class="keyword">return</span> str;</div><div class="line">	        &#125;</div></pre></td></tr></table></figure>
<h3 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h3><p>暴力算法(Brute Force)<br>自己实现String类的index算法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">strStr</span><span class="params">(String haystack, String needle)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(needle.length()==<span class="number">0</span>)&#123;</div><div class="line">        	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> m=haystack.length();</div><div class="line">        <span class="keyword">int</span> n=needle.length();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</div><div class="line">        	<span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">        	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n&amp;&amp;i+j&lt;m;j++)&#123;</div><div class="line">        		<span class="keyword">if</span>(haystack.charAt(i+j)!=needle.charAt(j))&#123;</div><div class="line">        			<span class="keyword">break</span>;</div><div class="line">        		&#125;<span class="keyword">else</span>&#123;</div><div class="line">        			count++;</div><div class="line">        		&#125;</div><div class="line">        	&#125;</div><div class="line">        	<span class="keyword">if</span>(count==n)&#123;</div><div class="line">        		<span class="keyword">return</span> i;</div><div class="line">        	&#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h3 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h3><p><img src="http://obmxnha1c.bkt.clouddn.com/slr4Z" alt="Untitled Image"><br><img src="http://obmxnha1c.bkt.clouddn.com/bywsd" alt="Untitled Image"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * http://wiki.jikexueyuan.com/project/kmp-algorithm/define.html</div><div class="line"> * 仔细研读、多举例、多调试!</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">_028KMP</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 时间复杂度O(M+N)</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">strStr</span><span class="params">(String haystack,String needle)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span>(needle.length()== <span class="number">0</span>)&#123;</div><div class="line">			<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> kmpSearch(haystack,needle);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 *求next数组，时间复杂度O(N)，准确来说，不超过2N,N表示模式串p的长度</div><div class="line">	 *k表示前一个指针，j表示后一个指针</div><div class="line">	 2种情况：</div><div class="line">	 *情况1：如果k越界，或者p[k]==p[j]，直接赋值</div><div class="line">	 *情况2：否则，将k往前移动</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span>[] getNext(String p) &#123;</div><div class="line">		<span class="keyword">int</span> n=p.length();</div><div class="line">		<span class="keyword">int</span>[] next=<span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line">		next[<span class="number">0</span>]=-<span class="number">1</span>;</div><div class="line">		<span class="keyword">int</span> k=-<span class="number">1</span>;</div><div class="line">		<span class="keyword">int</span> j=<span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span>(j&lt;n-<span class="number">1</span>)&#123;</div><div class="line">			<span class="comment">//情况1</span></div><div class="line">			<span class="keyword">if</span>(k==-<span class="number">1</span>||p.charAt(k)==p.charAt(j))&#123;</div><div class="line">				k++;</div><div class="line">				j++;</div><div class="line">				<span class="comment">/*假设p="ABCDABD",k=1,j=5</span></div><div class="line">				 也就是p的第一个'B'与第二个'B'相等的情况,那么第二个'D'位置的next值就是2</div><div class="line">				即:next[6]=2</div><div class="line">				 */</div><div class="line">				<span class="comment">/*if(p.equals("ABCDABD")&amp;&amp;k==2&amp;&amp;j==6)&#123;</span></div><div class="line">					System.out.println("next"+"["+j+"]="+k);</div><div class="line">				&#125;*/</div><div class="line">				next[j]=k;</div><div class="line">			&#125; <span class="keyword">else</span>&#123;</div><div class="line">				<span class="comment">//情况2</span></div><div class="line">				<span class="comment">/*如果不匹配，由于next[k]&lt;k,将k往前移动,检测k位置之前的与j位置的字符是否相等</span></div><div class="line">				 假设p="AAAAABCD",k=4,j=5</div><div class="line">				 */</div><div class="line">				<span class="comment">/*if(p.equals("AAAAABCD"))&#123;</span></div><div class="line">					System.out.println("k="+k+",j="+j+",next["+k+"]="+next[k]);</div><div class="line">				&#125;*/</div><div class="line">				k=next[k];</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> next;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 *KMP算法,时间复杂度O(M)，M表示文本串s的长度</div><div class="line">	 *2种情况：</div><div class="line">	 *情况1：如果越界，或者s[i]==p[j]，则i与j都往后移动</div><div class="line">	 *情况2：否则，将j移动到next[j]位置</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">kmpSearch</span><span class="params">(String s,String p)</span></span>&#123;</div><div class="line">		<span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> j=<span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> m=s.length();</div><div class="line">		<span class="keyword">int</span> n=p.length();</div><div class="line">		<span class="keyword">int</span>[] next=getNext(p);</div><div class="line">		<span class="keyword">while</span>(i&lt;m&amp;&amp;j&lt;n)&#123;</div><div class="line">			<span class="comment">//情况1</span></div><div class="line">			<span class="keyword">if</span>(j==-<span class="number">1</span>||s.charAt(i)==p.charAt(j))&#123;</div><div class="line">				i++;</div><div class="line">				j++;</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				<span class="comment">//情况2</span></div><div class="line">				<span class="comment">/*"偷懒"的理解，只考虑“前缀与后缀没有重合区间”的简单情况</span></div><div class="line">				假设:s="BBC ABCDAB ABCDABCDABDE";p="ABCDABD"</div><div class="line">				1、s的第二个“AB”与p的第二个"AB"相等</div><div class="line">				2、p的第一个"AB"与p的第二个"AB"相等</div><div class="line">				所以必然有:s的第二个"AB"与p的第一个"AB"相等,故而，下一步，可以直接检测s的第二个空格与p的‘C’字符是否匹配</div><div class="line">				如果还不理解，看这句话：y=z,x=z --&gt; y=x*/</div><div class="line">				<span class="comment">/*if(s.equals("BBC ABCDAB ABCDABCDABDE")&amp;&amp;p.equals("ABCDABD")&amp;&amp;i==10&amp;&amp;j==6)&#123;</span></div><div class="line">					System.out.println("下一步比较s的"+i+"位置的字符与p的"+next[j]+"位置的字符是否相等");</div><div class="line">				&#125;*/</div><div class="line">				j=next[j];</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(j==n)&#123;</div><div class="line">			<span class="keyword">return</span> i-n;</div><div class="line">		&#125; <span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">return</span>-<span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">		String s=<span class="string">"AABAABAC AAAAABCD CD"</span>;</div><div class="line">		String p=<span class="string">"AAAAABCD"</span>;</div><div class="line">		System.out.println(strStr(s, p));</div><div class="line">		System.out.println(s.indexOf(p));</div><div class="line">		s=<span class="string">"BBC ABCDAB ABCDABCDABDE"</span>;</div><div class="line">		p=<span class="string">"ABCDABD"</span>;</div><div class="line">		System.out.println(strStr(s, p));</div><div class="line">		System.out.println(s.indexOf(p));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[网络基础知识总结]]></title>
      <url>http://www.bluestroy.com/2016/09/22/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[常用的位运算技巧]]></title>
      <url>http://www.bluestroy.com/2016/09/21/%E5%B8%B8%E7%94%A8%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<blockquote>
<p>位运算——<strong>高效性</strong>。<br><em>使用适当的位运算不是为了装逼，而是为了迷倒别人。</em><a id="more"></a></p>
</blockquote>
<h3 id="常用的位运算例子："><a href="#常用的位运算例子：" class="headerlink" title="常用的位运算例子："></a>常用的位运算例子：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 常见的位运算</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bitOperation</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a= <span class="number">56</span>;</div><div class="line">    <span class="keyword">int</span> b =<span class="number">23</span>;</div><div class="line"></div><div class="line">    <span class="comment">/******不用临时变量交换两个数*****/</span></div><div class="line">    a^=b;</div><div class="line">    b^=a;</div><div class="line">    a^=b;</div><div class="line">    println(<span class="string">"a:"</span>+a);</div><div class="line">    println(<span class="string">"b:"</span>+b);</div><div class="line"></div><div class="line">    <span class="comment">/*****乘2运算*****/</span></div><div class="line">    <span class="keyword">int</span> c = a &lt;&lt; <span class="number">1</span> ;</div><div class="line">    println(c);</div><div class="line"></div><div class="line">    <span class="comment">/*****除2运算*****/</span></div><div class="line">    <span class="keyword">int</span> d = b&gt;&gt;<span class="number">1</span>;</div><div class="line">    println(d);</div><div class="line"></div><div class="line">    <span class="comment">/*****乘2的n次方   x &lt;&lt; n ********/</span></div><div class="line">    <span class="keyword">int</span> e = <span class="number">3</span> &lt;&lt; <span class="number">2</span>;</div><div class="line">    println(e);</div><div class="line"></div><div class="line">    <span class="comment">/********除2的n次方  x &gt;&gt; n  ******/</span></div><div class="line">    println(<span class="number">8</span> &gt;&gt; <span class="number">2</span>);</div><div class="line"></div><div class="line">    <span class="comment">/********* 判断一个数的奇偶性，true奇数，false偶数 *****/</span></div><div class="line">    println((<span class="number">9</span> &amp; <span class="number">1</span>)==<span class="number">1</span>);</div><div class="line">    println((<span class="number">8</span> &amp; <span class="number">1</span>)==<span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="comment">/**** 判断两个数符号是否相同，true相同，false不同 ***/</span></div><div class="line">    println((<span class="number">8</span> ^ -<span class="number">2</span>)&gt;=<span class="number">0</span>);</div><div class="line">    <span class="comment">//求平均数</span></div><div class="line">    println((<span class="number">3</span>+<span class="number">2</span>)&gt;&gt;<span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="comment">/**** &gt;&gt;是算术（有符号）右移，它使用最高位填充移位后左侧的空位，不改变符号。</span></div><div class="line">     * &gt;&gt;&gt; 是逻辑无符号（）右移，它用0填充左侧的空为。没有算术含义   */</div><div class="line">    println(<span class="string">"&gt;&gt;和&gt;&gt;&gt;的区别："</span>);</div><div class="line">    println((<span class="keyword">byte</span>)-<span class="number">4</span>&gt;&gt;<span class="number">1</span>);</div><div class="line">    println((<span class="keyword">byte</span>)-<span class="number">4</span>&gt;&gt;&gt;<span class="number">1</span>);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="位运算实现加法操作"><a href="#位运算实现加法操作" class="headerlink" title="位运算实现加法操作"></a>位运算实现加法操作</h4><p><strong>思路：</strong>  </p>
<ul>
<li>异或运算得出两个数不计进位的和  </li>
<li>与运算的结果左移一位刚好是进位<br>可使用递归或非递归方式两种方法实现。<br><strong>实现：</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//非递归法实现加法运算</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> result = a;</div><div class="line">    <span class="keyword">while</span>(b!=<span class="number">0</span>)&#123;</div><div class="line">        result = a^b;</div><div class="line">        b=(a&amp;b)&lt;&lt;<span class="number">1</span>;</div><div class="line">        a = result;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//递归法实现加法运算</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add2</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> ((a&amp;b)==<span class="number">0</span>) <span class="keyword">return</span> a^b;</div><div class="line">    <span class="keyword">return</span> add2(a^b,(a&amp;b)&lt;&lt;<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="位运算实现减法操作"><a href="#位运算实现减法操作" class="headerlink" title="位运算实现减法操作"></a>位运算实现减法操作</h4><p><strong>思路：</strong><br>减法可通过转换变为加法来运算，因为a-b=a+(-b)=a+(~b)+1<br><strong>实现：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//减法运算</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">        <span class="comment">//b的相反数是~b+1</span></div><div class="line">        <span class="keyword">return</span> add(a, ~b+<span class="number">1</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h4 id="位运算实现乘法操作"><a href="#位运算实现乘法操作" class="headerlink" title="位运算实现乘法操作"></a>位运算实现乘法操作</h4><p>待续</p>
<h4 id="位运算实现除法操作"><a href="#位运算实现除法操作" class="headerlink" title="位运算实现除法操作"></a>位运算实现除法操作</h4><p>待续</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java线程安全的容器类]]></title>
      <url>http://www.bluestroy.com/2016/09/20/Java%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%AE%B9%E5%99%A8%E7%B1%BB/</url>
      <content type="html"><![CDATA[<blockquote>
<p><em>转自<a href="http://blog.csdn.net/snail_ren/article/details/51969621" target="_blank" rel="external">Jeff的自留地：java线程安全的容器类</a></em>  </p>
</blockquote>
<p>Java编码中，我们经常需要用到容器来编程。在并发环境下，Java提供一些已有容器能够支持并发。Hashtable和Vector都是JKD早期版本的内容  <a id="more"></a></p>
<h3 id="1-Map"><a href="#1-Map" class="headerlink" title="1. Map"></a>1. Map</h3><p><img src="http://obmxnha1c.bkt.clouddn.com/mapLei.jpg" alt="Untitled Image"></p>
<p>在Map类中，提供两种线程安全容器。</p>
<p><strong>java.util.Hashtable</strong>  </p>
<p>Hashtable和HashMap类似，都是散列表，存储键值对映射。主要区别在于Hashtable是线程安全的。当我们查看Hashtable源码的时候，可以看到Hashtable的方法都是通过synchronized来进行方法层次的同步，以达到线程安全的作用。</p>
<p><strong>java.util.concurrent.ConcurrentHashMap</strong><br>ConcurrentHashMap是性能更好的散列表。在兼顾线程安全的同时，相对于Hashtable，在效率上有很大的提高。我们可以猜想，Hashtable的线程安全实现是对方法进行synchronized，很明显可以通过其他并发方式，如ReentrantLock进行优化。而ConcurrentHashMap正是采用了ReentrantLock。运用锁分离技术，即在代码块上加锁，而不是方法上加。同时ConcurrentHashMap的一个特色是允许多个修改并发操作。这就有意思了，我们知道一般写都是互斥的，为什么这个还能多个同时写呢？那是因为ConcurrentHashMap采用了内部使用段机制，将ConcurrentHashMap分成了很多小段。只要不在一个小段上写就可以并发写。</p>
<h3 id="2-Collection"><a href="#2-Collection" class="headerlink" title="2. Collection"></a>2. Collection</h3><p><img src="http://obmxnha1c.bkt.clouddn.com/collectionLei.jpg" alt="Untitled Image"></p>
<p>Collection部分主要是运用的CopyOnWrite机制，即写时复制机制。从字面上就能理解什么意思，就是当我们往一个容器里添加元素的时候，先对这个容器进行一次复制，对副本进行写操作。写操作结束后，将原容器的引用指向新副本容器，就完成了写的刷新。从它的实现原理，我们可以看出这种机制是存在缺点的。</p>
<p>1.内存占用：毫无疑问，每次写时需要首先复制一遍原容器，假如复制了很多，或者本身原容器就比较大，那么肯定会占用很多内存。可以采用压缩容器中的元素来防止内存消耗过大。</p>
<p>2.数据一致性问题：当我们在副本中进行写操组时，只能在最终结束后使数据同步，不能实时同步</p>
<p>可以看到，这种机制适用于读操作多，写操作少的应用场景。</p>
<p><strong>java.util.concurrent.CopyOnWriteArrayList</strong></p>
<p>Collection类的线程安全容器主要都是利用的ReentrantLock实现的线程安全，CopyOnWriteArrayList也不例外。在并发写的时候，需要获取lock。读的时候不需要进行lock</p>
<p><strong>java.util.concurrent.CopyOnWriteArraySet</strong></p>
<p>CopyOnWriteArraySet的实现就是基于CopyOnWriteArrayList实现的，采用的装饰器进行实现。二者的区别和List和Set的区别一样。</p>
<p><strong>Vector</strong></p>
<p>一般我们都不用Vector了，不过它确实也是线程安全的。相对于其他容器，能够提供随机访问功能。</p>
<h3 id="3-StringBuffer和StringBuilder"><a href="#3-StringBuffer和StringBuilder" class="headerlink" title="3. StringBuffer和StringBuilder"></a>3. StringBuffer和StringBuilder</h3><p>我们知道，String在进行+操作的时候，原生的String会重新新建一个String对象来完成字符串拼接，明显这种操作多了的话会加重服务器负担。因此我们需要的时候就会用StringBuffer和StringBuilder。这二者有什么区别呢？</p>
<p><strong>StringBuffer</strong>是线程安全的，StringBuilder不是。从StringBuffer的源码可以看到，它采用的是对方法进行synchronized实现的同步。但是加了同步机制，肯定会对性能有一定影响。  </p>
<blockquote>
<p>高并发情况下，对数据安全有需求，则用StringBuffer，否则用StringBuilder</p>
</blockquote>
<p><br></p>
<hr>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ol>
<li><strong>*java.util.Hashtable</strong>：synchronized实现</li>
<li><strong>java.util.concurrent.ConcurrentHashMap</strong>: ReentrantLock实现</li>
<li><strong>java.util.concurrent.CopyOnWriteArrayList</strong>: ReentrantLock实现</li>
<li><strong>java.util.concurrent.CopyOnWriteArraySet</strong>: ReentrantLock实现</li>
<li><strong>*Vector</strong>: ReentrantLock实现</li>
<li><strong>*StringBuffer</strong>： synchronized实现</li>
</ol>
<blockquote>
<p>前1.2.属Map，3.4.5.属Collection。<br><em>注：新程序中不应该使用过时的Vector、Hashtable和Stack等。</em></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java并发的点点滴滴]]></title>
      <url>http://www.bluestroy.com/2016/09/20/Java%E5%B9%B6%E5%8F%91%E7%9A%84%E7%82%B9%E7%82%B9%E6%BB%B4%E6%BB%B4/</url>
      <content type="html"><![CDATA[<p><strong>争用条件：</strong> 当多个线程同时共享访问同一数据（内存区域）时，每个线程都尝试操作该数据，从而导致数据被破坏（corrupter），这种现象称为争用条件（条件争用）。  </p>
<p><strong>线程的交互：</strong> 互斥与同步</p>
<p><strong>互斥：</strong> 关键数据在同一时间只能被一个线程访问。<br><strong>同步：</strong> 一种通信机制。<br><strong>object方法：</strong> wait()/notify()/notifyAll();<a id="more"></a></p>
<p><strong>可见性：</strong> 一个线程对共享变量值的修改，能够及时地被其他线程看到。<br><strong>共享变量：</strong> 如果一个变量在多个线程的工作内存中都存在副本，那么这个变量就是这几个线程的共享变量。<br><strong>Java内存模型（JMM)：</strong><br>所有变量都存储在主内存中，每个线程都有自己独立的工作内存，里面保存该线程使用到的变量的副本（主内存中该变量的一份拷贝）。 </p>
<div align="center"><br><img src="http://obmxnha1c.bkt.clouddn.com/tempClipboardImage.png" width="400" height="220"><br></div>

<blockquote>
<p>线程对共享变量的所有操作都必须在自己的工作内存中进行，不能直接从内存中读写。<br>不同线程之间无法直接访问其他线程工作内存中的变量，线程间变量的值的传递需要通过主内存来完成。  </p>
</blockquote>
<p><br></p>
<p>可见性语言层面的实现方式：  </p>
<ol>
<li>synchronized  </li>
<li>volatile  </li>
</ol>
<p>synchronized可保证原子性，但volatile不能保证原子性。   </p>
<p><em>Volatile 变量具有 synchronized 的可见性特性，但是<strong>不具备原子特性</strong>。这就是说线程能够自动发现 volatile 变量的最新值。只是使用volatile关键字一般情况下不能保证同步，即原子性。</em>强制每次都直接读取内存，组织编译器重排序，确保volatile类型的值一旦被写入缓存必定会被立即更新到主存。</p>
<h3 id="待学习"><a href="#待学习" class="headerlink" title="待学习"></a>待学习</h3><p>//reentrantLock<br>//final也可以保证内存可见性<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line">lock.lock();</div><div class="line">	<span class="keyword">try</span>&#123;</div><div class="line">    	number++;</div><div class="line">    &#125;<span class="keyword">finally</span>&#123;</div><div class="line">    	lock.unlock();</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p><br></p>
<p><em>慕课网上非常好的视频教程<a href="http://www.imooc.com/learn/352" target="_blank" rel="external">细说Java多线程值内存可见性</a></em></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java容器类和工具类]]></title>
      <url>http://www.bluestroy.com/2016/09/19/Java%E5%AE%B9%E5%99%A8%E7%B1%BB%E5%92%8C%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      <content type="html"><![CDATA[<blockquote>
<p>四种基本数据结构：集合、线性结构、树形结构、图状街头。</p>
<p><em>注：新程序中不应该使用过时的Vector、Hashtable和Stack等。</em><br><a id="more"></a>  </p>
</blockquote>
<h4 id="Stack栈"><a href="#Stack栈" class="headerlink" title="Stack栈"></a>Stack栈</h4><p>先进后出，使用LinkedList实现的。  </p>
<ul>
<li>push():压入栈    </li>
<li>pop(): 移除并返回栈顶元素  </li>
<li>peek(): 提供栈顶元素但不移除  </li>
<li>empty(): 栈是否为空  </li>
</ul>
<h4 id="Queue队列"><a href="#Queue队列" class="headerlink" title="Queue队列"></a>Queue队列</h4><p>先进先出，队列在并发编程中特别重要，因为它们可以安全地将对象从一个任务传输到另一个任务。  </p>
<ul>
<li>offer(): 添加一个元素到队尾并返回true，若队列满则返回false。</li>
<li>peek(): 返回队列头部元素，若队列空则返回null。</li>
<li>element(): 返回队列头部元素，若队列空则抛出NoSuchElementException异常。</li>
<li>poll(): 移除并返回队头元素，若队列空则返回null。</li>
<li>remove(): 移除并返队头元素，若队列空则抛出NoSuchElementException异常。  </li>
</ul>
<blockquote>
<p>LinkedList提供了方法以支持队列的行为，并且它实现了Queue接口，因此可以将LinkedList向上转型为Queue。</p>
</blockquote>
<h4 id="用两个栈实现一个队列"><a href="#用两个栈实现一个队列" class="headerlink" title="用两个栈实现一个队列"></a>用两个栈实现一个队列</h4><blockquote>
<ol>
<li>插入操作在stack1中进行，删除操作在stack2中进行  </li>
<li>如果stack2为空，则将stack1中的所有元素转移到stack2中  </li>
<li>出栈时如果两个栈都为空，则抛出NoSuchElementException异常并处理。</li>
</ol>
</blockquote>
<h4 id="使用两个队列实现一个栈"><a href="#使用两个队列实现一个栈" class="headerlink" title="使用两个队列实现一个栈"></a>使用两个队列实现一个栈</h4><blockquote>
<ol>
<li>有两个队列q1和q2，先往q1内插入a，b，c，这做的都是栈的push操作。</li>
<li>现在要做pop操作，即要得到c，这时可以将q1中的a,b两个元素全部dequeue并存入q2中，这时q2中元素为a，b，对q1再做一次dequeue操作即可得到c。</li>
<li>如果继续做push操作，比如插入d，f，则把d，f插入到q2中，</li>
<li>此时若要做pop操作，则做步骤2</li>
<li>以此类推，就实现了用两个队列来实现一个栈的目的。</li>
</ol>
<p>新push进来的元素总是插入到非空队列中，空队列保存一次pop之后的元素。那么原来的空队列变成非空，原来的非空队列变成了空，总是这样循环。<br>push和pop  时间复杂度O(n)。</p>
</blockquote>
<h4 id="优先队列PriorityQueue"><a href="#优先队列PriorityQueue" class="headerlink" title="优先队列PriorityQueue"></a>优先队列PriorityQueue</h4><p>优先队列调用offer方法来插入一个对象时，这个对象会在队列中被排序。默认的排序将使用对象在队列中的自然顺序，可提供自己的Comparator来修该这个顺序。PriorityQueue可确保调用peek、poll、remove方法时，获取的元素是队列中优先级最高的元素。PriorityQueue与Integer、String、character内置类型一起工作易如反掌。（若是String,空格也算值，且优先级高于字母）</p>
<blockquote>
<p>PriorityQueue本质上是堆排序里面的小根堆。</p>
</blockquote>
<p>PriorityQueue：脑补。</p>
<p><em>在做算法题的时候可以考虑使用PriorityQueue</em></p>
<h4 id="Arrays工具类用法总结"><a href="#Arrays工具类用法总结" class="headerlink" title="Arrays工具类用法总结"></a>Arrays工具类用法总结</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] a = &#123;-<span class="number">3</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">54</span>,<span class="number">63</span>,<span class="number">74</span>&#125;;</div><div class="line"><span class="keyword">int</span>[] b = &#123;-<span class="number">3</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">54</span>,<span class="number">63</span>,<span class="number">74</span>&#125;;</div><div class="line">Integer[] c = &#123;<span class="number">15</span>,<span class="number">6</span>,<span class="number">788</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">56</span>,<span class="number">9</span>&#125;;</div><div class="line">Arrays.toString(a); <span class="comment">//打印数组</span></div><div class="line"><span class="keyword">int</span> y =Arrays.binarySearch(a,<span class="number">11</span>);   <span class="comment">//二分查找，返回找到的下标，找不到返回负数</span></div><div class="line"><span class="keyword">int</span>[] xa=Arrays.copyOf(a,<span class="number">3</span>);    <span class="comment">//复制数组的前三个元素为另一个数组</span></div><div class="line"><span class="keyword">int</span>[] xb = Arrays.copyOfRange(a,<span class="number">0</span>,<span class="number">2</span>);   <span class="comment">//复制数组下标&gt;=0,&lt;2的部分</span></div><div class="line"><span class="keyword">boolean</span> z =Arrays.equals(a,b);  <span class="comment">//判断两个数组内容是否相同</span></div><div class="line">Arrays.fill(a,<span class="number">7</span>);   <span class="comment">//数组元素全部填充为7</span></div><div class="line">Arrays.fill(a,<span class="number">2</span>,<span class="number">4</span>,<span class="number">0</span>);   <span class="comment">//数组下标&gt;=2,&lt;4的元素填充为0</span></div><div class="line">Arrays.sort(c,<span class="number">2</span>,<span class="number">6</span>); <span class="comment">//对数组下标&gt;=2,&lt;6的部分升序排序</span></div><div class="line">Arrays.sort(c);     <span class="comment">//对数组进行升序排序</span></div><div class="line">Arrays.sort(c,Collections.&lt;Integer&gt;reverseOrder());<span class="comment">//对数组进行降序排序</span></div><div class="line">Arrays.sort(c,<span class="keyword">new</span> Comparator&lt;Integer&gt;()&#123;<span class="comment">//自定义降序排序排序</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer a, Integer b)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> b.compareTo(a);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">Arrays.sort(c);     <span class="comment">//对数组进行升序排序</span></div><div class="line">Arrays.sort(c, <span class="number">0</span>, <span class="number">4</span>, <span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123; <span class="comment">//自定义数组下标&gt;=0,&lt;4的部分降序</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> o2.compareTo(o1);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">char</span>[] s = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>&#125;;</div><div class="line"><span class="keyword">char</span>[] t = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>&#125;;</div><div class="line"><span class="comment">//判断两个数组的内容是否相等</span></div><div class="line">println(Arrays.equals(s,t));</div></pre></td></tr></table></figure>
<h4 id="Collections工具类用法总结"><a href="#Collections工具类用法总结" class="headerlink" title="Collections工具类用法总结"></a>Collections工具类用法总结</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">	List list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">    Collections.addAll(list,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">9</span>);<span class="comment">//将后面的元素都添加到list中</span></div><div class="line">    Collections.reverseOrder();<span class="comment">//返回一个Comparator&lt;T&gt;倒序排序的接口对象</span></div><div class="line">    println(list);</div><div class="line">    Collections.reverse(list);  <span class="comment">//将列表逆序排序</span></div><div class="line">    Collections.sort(list); <span class="comment">//将列表升序排序</span></div><div class="line">    println(list);</div><div class="line">    Collections.sort(list,Collections.reverseOrder());  <span class="comment">//将列表降序排序</span></div><div class="line"></div><div class="line">    List list2 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">    Collections.addAll(list2,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">16</span>,<span class="number">45</span>);</div><div class="line">    <span class="keyword">int</span> index = Collections.binarySearch(list2,<span class="number">12</span>); <span class="comment">//二分查找，返回下标，无则返回负数</span></div><div class="line">    println(list);</div><div class="line">    println(index);</div><div class="line"></div><div class="line">    Object max = Collections.max(list); <span class="comment">//返回最大值</span></div><div class="line">    Object min = Collections.min(list); <span class="comment">//返回最小值</span></div><div class="line">    println(<span class="string">"max:"</span>+max);</div><div class="line">    println(<span class="string">"min:"</span>+min);</div><div class="line"></div><div class="line">    List list3 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;()&#123;&#123;add(<span class="number">2</span>);add(<span class="number">3</span>);add(<span class="number">5</span>);add(<span class="number">7</span>);add(<span class="number">6</span>);add(<span class="number">8</span>);&#125;&#125;;<span class="comment">//初始化</span></div><div class="line"><span class="comment">//        Collections.synchronizedList(list);</span></div><div class="line">    <span class="comment">//查找是否有某子列表，有则返回第一个子列表下标，无则返回-1</span></div><div class="line">    <span class="keyword">int</span> sindex = Collections.indexOfSubList(list3,Arrays.asList(<span class="number">2</span>,<span class="number">3</span>));</div><div class="line">    <span class="comment">//查找是否有某子列表，有则返回最后一个子列表下标，无则返回-1</span></div><div class="line">    <span class="keyword">int</span> lindex = Collections.lastIndexOfSubList(list3,Arrays.asList(<span class="number">2</span>,<span class="number">3</span>));</div><div class="line">    println(<span class="string">"first index:"</span>+sindex);</div><div class="line">    println(<span class="string">"last index:"</span>+lindex);</div><div class="line"></div><div class="line">    Collections.rotate(list3,<span class="number">2</span>);<span class="comment">//集合中元素后移2个位置，益处的循环到前面</span></div><div class="line">    println(list3);</div><div class="line">    Collections.shuffle(list3);<span class="comment">//对集合进行洗牌，即打乱顺序</span></div><div class="line">    println(list3);</div><div class="line">    Collections.swap(list3,<span class="number">0</span>,<span class="number">1</span>);<span class="comment">//交换集合中第0个和第一个元素</span></div><div class="line">    println(list3);</div><div class="line"></div><div class="line">    <span class="comment">//list本身不是同步的，此法得到线程安全的list</span></div><div class="line">    <span class="comment">//【注意】即直接使用它提供的单个函数，可以同步。但若多个函数想同步，必须自己做同步。</span></div><div class="line">    List safeList = Collections.synchronizedList(list3);</div><div class="line"></div><div class="line">    <span class="comment">//三个final类型的类变量，在某些情况下，我们经常需要返回一个空的集合对象，</span></div><div class="line">    <span class="comment">//比如在数据查询时，并不需要发挥一个NULL或是异常，那么就可以返回一个空的集合对象。</span></div><div class="line">    List emptyList = Collections.EMPTY_LIST;    <span class="comment">//创建一个空列表</span></div><div class="line">    emptyList = Collections.emptyList();    <span class="comment">//同上，下面类推</span></div><div class="line">    Map emptyMap = Collections.EMPTY_MAP;  <span class="comment">//创建一个空map</span></div><div class="line">    Set emptySet = Collections.EMPTY_SET;  <span class="comment">//创建一个空集合</span></div></pre></td></tr></table></figure>
<h4 id="Java线程安全的容器类"><a href="#Java线程安全的容器类" class="headerlink" title="Java线程安全的容器类"></a>Java线程安全的容器类</h4><ol>
<li><strong>java.util.Hashtable</strong>：synchronized实现</li>
<li><strong>*java.util.concurrent.ConcurrentHashMap</strong>: ReentrantLock实现</li>
<li><strong>ava.util.concurrent.CopyOnWriteArrayList</strong>: ReentrantLock实现</li>
<li><strong>java.util.concurrent.CopyOnWriteArraySet</strong>: ReentrantLock实现</li>
<li><strong>Vector</strong>: ReentrantLock实现</li>
<li><strong>StringBuffer</strong>： synchronized实现</li>
</ol>
<blockquote>
<p>前1.2.属Map，3.4.5.属Collection。</p>
</blockquote>
<h4 id="容器本身也有很多有用的方法，待总结。"><a href="#容器本身也有很多有用的方法，待总结。" class="headerlink" title="容器本身也有很多有用的方法，待总结。"></a>容器本身也有很多有用的方法，待总结。</h4>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于Git，你不需要记住更多]]></title>
      <url>http://www.bluestroy.com/2016/09/17/%E5%85%B3%E4%BA%8EGit%EF%BC%8C%E4%BD%A0%E4%B8%8D%E9%9C%80%E8%A6%81%E8%AE%B0%E4%BD%8F%E6%9B%B4%E5%A4%9A/</url>
      <content type="html"><![CDATA[<h4 id="关联本地仓库和远程仓库"><a href="#关联本地仓库和远程仓库" class="headerlink" title="关联本地仓库和远程仓库"></a>关联本地仓库和远程仓库</h4><p>首先，需要本地创建一个文件夹<code>test</code>，将其初始化为git仓库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git init</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>然后，在github服务器端也创建一个同名仓库<code>test</code>，执行以下命令关联远程仓库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote add origin git@github.com:BluesTroy/test.git</div></pre></td></tr></table></figure></p>
<p>接着，将远程<code>master</code>最新分支拉取到本地<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull origin master</div></pre></td></tr></table></figure></p>
<p>最后，就可以将本地库的内容推送到远程<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push -u origin master</div></pre></td></tr></table></figure></p>
<p>第一次推送到<code>master</code>分支时，<code>-u</code>参数会把本地<code>master</code>分支和远程<code>master</code>分支关联，之后就可以直接使用简化命令<code>git push</code>和<code>git pull</code>了。</p>
<h4 id="拉取远程特定分支"><a href="#拉取远程特定分支" class="headerlink" title="拉取远程特定分支"></a>拉取远程特定分支</h4><p>远程分支和本地分支需要区分，所以，在从服务器上拉取特定分支的时候，需要指定本地分支名字。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout --track origin/develop</div></pre></td></tr></table></figure></p>
<p>注意该命令由于带有–track参数，所以要求git1.6.4以上！这样git会自动切换到develop分支。</p>
<h4 id="为git命令设置别名"><a href="#为git命令设置别名" class="headerlink" title="为git命令设置别名"></a>为git命令设置别名</h4><p>将以下内容追加到<code>C:\Users\Troy\.gitconfig</code>文件，就可以用简化命令，如<code>git st</code>来代替<code>git status</code>。  </p>
<blockquote>
<p>[alias]<br>  co = checkout<br>  ci = commit<br>  br = branch<br>  st = status<br>  unstage = reset HEAD<br>  last = log -1<br>  lg = log –color –graph –pretty=format:’%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset’ –abbrev-commit</p>
</blockquote>
<h4 id="git修复冲突"><a href="#git修复冲突" class="headerlink" title="git修复冲突"></a>git修复冲突</h4><h5 id="修复merge冲突"><a href="#修复merge冲突" class="headerlink" title="修复merge冲突"></a>修复merge冲突</h5><p>如<code>develop</code>分支与<code>dev</code>分支合并：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git checkout develop</div><div class="line">$ git merge dev</div></pre></td></tr></table></figure></p>
<p>因为合并时有冲突，会出现分支(develop|MERGING)情况，会列出CONFLICT冲突的文件有哪些。<br><strong>解决：</strong><br>依次进入冲突文件，会出现冲突部分之前的内容和最新的内容，其中<br>==== HEAD<br>\======<br>=====dev<br>之间相关的内容要处理掉，需要保留最新的有用的内容，删掉旧的内容。<br>处理完成后执行以下命令即可修复冲突：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git add -A</div><div class="line">$ git commit -m <span class="string">'fix conflict'</span></div></pre></td></tr></table></figure></p>
<h5 id="修复rebase冲突"><a href="#修复rebase冲突" class="headerlink" title="修复rebase冲突"></a>修复rebase冲突</h5><p>使用以下命令可能会出现<code>rebase</code>冲突：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull --rebase</div></pre></td></tr></table></figure></p>
<p>冲突出现和解决与<code>merge</code>冲突类似，解决完后执行以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git add -A</div><div class="line">git rebase --continue</div></pre></td></tr></table></figure></p>
<h4 id="ssh生成公钥和私钥"><a href="#ssh生成公钥和私钥" class="headerlink" title="ssh生成公钥和私钥"></a>ssh生成公钥和私钥</h4><p>git需要ssh访问的公钥<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen</div></pre></td></tr></table></figure></p>
<h4 id="gitignore使用方法"><a href="#gitignore使用方法" class="headerlink" title=".gitignore使用方法"></a>.gitignore使用方法</h4><p>在git中如果想忽略掉某个文件，不让这个文件提交到版本库中，可以使用修改根目录中 .gitignore 文件的方法（如无，则需自己手工建立此文件）。这个文件每一行保存了一个匹配的规则例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 此为注释 – 将被 Git 忽略  </div><div class="line">*.a       # 忽略所有 .a 结尾的文件  </div><div class="line">!lib.a    # 但 lib.a 除外  </div><div class="line">/TODO     # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO </div><div class="line">build/    # 忽略 build/ 目录下的所有文件  </div><div class="line">doc/*.txt # 会忽略 doc/notes.txt 但不包括   doc/server/arch.txt</div></pre></td></tr></table></figure></p>
<p><strong>如果某文件已添加到<code>.gitignore</code>，但不起作用，下面三条命令可解决：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git rm -r --cached .</div><div class="line">$ git add .</div><div class="line">$ git commit -m <span class="string">'update .gitignore'</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交</p>
</blockquote>
<h4 id="git多人协作常用命令"><a href="#git多人协作常用命令" class="headerlink" title="git多人协作常用命令"></a>git多人协作常用命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"># 从服务器上clone</div><div class="line">git clone ssh://git@xxx.xxx.xxx.xxx/opt/fashion/fashion.git  </div><div class="line"></div><div class="line">git branch dev	#本地建立新分支dev</div><div class="line">git checkout dev	#切换到dev分支</div><div class="line">#这样就可在dev分支上进行操作了,万一代码写错,还可以还原到原先的分支  </div><div class="line"></div><div class="line">git branch -d dev	#删除dev分支</div><div class="line">git branch	#查看当前分支HEAD</div><div class="line"></div><div class="line">#一但代码修改以后,保存自己写的代码到本地</div><div class="line">git status</div><div class="line">git add -A</div><div class="line">git commit -m “这段修改的代码你做了什么,写在这里面,方便别人看到”</div><div class="line"></div><div class="line">#接下来将自己的代码更新到网上</div><div class="line">git checkout develop</div><div class="line">git pull --rebase	#拉取服务器最新代码</div><div class="line">git merge dev	#将dev分支合并到develop分支</div><div class="line">git push	#提交自己的最新代码到服务器</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[各种排序算法总结]]></title>
      <url>http://www.bluestroy.com/2016/09/15/%E5%90%84%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><img src="http://obmxnha1c.bkt.clouddn.com/266279_1442481223258_BB3663E2B94AB7FD90C31D24E4C6E7EB.jpg" alt="Untitled Image"><br><em>快排的辅助存储应该是log(n)</em><br><em>稳定的含义：  两个相同元素的相对位置不变。</em><a id="more"></a></p>
<hr>
<h3 id="1-快速排序"><a href="#1-快速排序" class="headerlink" title="1 快速排序"></a>1 快速排序</h3><h5 id="1-1-思路"><a href="#1-1-思路" class="headerlink" title="1.1 思路"></a>1.1 思路</h5><blockquote>
<p>①以第一个关键字 K 1 为控制字，将 [K 1 ,K 2 ,…,K n ] 分成两个子区，使左区所有关键字小于等于 K 1 ，右区所有关键字大于等于 K 1 ，最后控制字居两个子区中间的适当位置。在子区内数据尚处于无序状态。<br>②把左区作为一个整体，用①的步骤进行处理，右区进行相同的处理。（即递归）<br>③重复第①、②步，直到左区处理完毕。`  </p>
</blockquote>
<h5 id="1-2-Java实现"><a href="#1-2-Java实现" class="headerlink" title="1.2 Java实现"></a>1.2 Java实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 快速排序</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> a     待排序的数组</div><div class="line"> * <span class="doctag">@param</span> left  待排序区间的开始下标</div><div class="line"> * <span class="doctag">@param</span> right 待排序区间的结束下标</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (left &gt;= right) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> i = left;</div><div class="line">    <span class="keyword">int</span> j = right;</div><div class="line">    <span class="keyword">int</span> key = a[i];    <span class="comment">//以第一个数为关键字</span></div><div class="line">    <span class="comment">//经过一趟后，关键字在中间的某处，左边的都比其小，右边的都比其大</span></div><div class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</div><div class="line">        <span class="comment">//先从j开始由右往左，遇见比关键字小的则将此数放到左边i的位置，然后i++</span></div><div class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; a[j] &gt;= key) &#123;</div><div class="line">            j--;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (i &lt; j) &#123;</div><div class="line">            a[i] = a[j];</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//然后再从i开始由左往右，遇见比关键字大的数则将此数放到j的位置，然后j--</span></div><div class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; a[i] &lt;= key) &#123;</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (i &lt; j) &#123;</div><div class="line">            a[j] = a[i];</div><div class="line">            j--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    a[i] = key;</div><div class="line">    <span class="comment">//然后对左右区间分别执行快排算法</span></div><div class="line">    quickSort(a, left, i - <span class="number">1</span>);</div><div class="line">    quickSort(a, i + <span class="number">1</span>, right);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="1-3-算法分析"><a href="#1-3-算法分析" class="headerlink" title="1.3 算法分析"></a>1.3 算法分析</h5><p>每次分成两组，分logn次，每趟比较n次。<br><strong>时间复杂度</strong>： O(nlogn)<br><strong>最坏情况</strong>：O(n^2)<br><strong>空间复杂度</strong>：O(+logn)<br><strong>不稳定</strong></p>
<blockquote>
<p>始序列有序时，快速排序效率最低<br>快排每一趟就是O(n)，在一般情况下递归深度是log(n)，所以总的复杂度是O(nlogn)。在有序的情况下，递归深度变成了n，所以总复杂度会退化到O(n*n)</p>
</blockquote>
<p><strong>针对快速排序的最坏情况进行的改进方法</strong> </p>
<blockquote>
<p>改进方法主要是对控制字pivot的选取进行改进，默认的是选取区间的第一个节点。<br>改进方法1. 随机选取区间里面的的一个数作为控制字。<br>改进方法2. 对区间的left,middle,last三数取中作为关键字，避开了随机数产生器的开销又带了了一定程度的随机性。<br><em>改进方法还有其他很多种。</em>  </p>
</blockquote>
<p><strong>快速排序的优化</strong></p>
<ol>
<li>待排序序列的长度分割到一定大小后，使用插入排序。（比如right-left+1&lt;10）。<strong>原因：</strong> 对于很小和部分有序的数组，快排不如插排好。</li>
<li>优化尾部递归、使用并行或多线程处理子序列等其他。</li>
</ol>
<h3 id="2-冒泡排序"><a href="#2-冒泡排序" class="headerlink" title="2 冒泡排序"></a>2 冒泡排序</h3><p>按从小到大排序：</p>
<h5 id="2-1-思路"><a href="#2-1-思路" class="headerlink" title="2.1 思路"></a>2.1 思路</h5><blockquote>
<ol>
<li>按从前往后的顺序多次扫描，每次扫描向后比较相邻元素，若后面比前面小，则交换它们</li>
<li>第一趟扫描完后，最后一个元素应该是最大的数</li>
<li>同理扫描前n-1个数，第二次扫描第二大元素则变为倒数第二个位置</li>
<li>以此类推</li>
</ol>
</blockquote>
<h5 id="2-2-Java实现"><a href="#2-2-Java实现" class="headerlink" title="2.2 Java实现"></a>2.2 Java实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 冒泡排序</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> a 待排序的数组</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> a[])</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</div><div class="line">    <span class="comment">//n个数，进行n-1次扫描</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = a.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</div><div class="line">        <span class="comment">//每次扫描都比较前i个数，每两个相邻的数，将小的放前面</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>]) &#123;</div><div class="line">                temp = a[j];</div><div class="line">                a[j] = a[j + <span class="number">1</span>];</div><div class="line">                a[j + <span class="number">1</span>] = temp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="2-3-算法分析"><a href="#2-3-算法分析" class="headerlink" title="2.3 算法分析"></a>2.3 算法分析</h5><p>感觉冒泡排序交换次数太多，用的比较少<br><strong>时间复杂度</strong>： O(n^2)<br><strong>最坏情况</strong>：O(n^2)<br><strong>最好</strong>：O(n)<br><strong>空间复杂度</strong>：O(1)<br><strong>稳定</strong></p>
<h3 id="3-直接选择排序"><a href="#3-直接选择排序" class="headerlink" title="3 直接选择排序"></a>3 直接选择排序</h3><h5 id="3-1-思路"><a href="#3-1-思路" class="headerlink" title="3.1 思路"></a>3.1 思路</h5><blockquote>
<p>每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。 选择排序是不稳定的排序方法</p>
<h5 id="3-2-Java实现"><a href="#3-2-Java实现" class="headerlink" title="3.2 Java实现"></a>3.2 Java实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 直接选择排序</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> a 待排序的数组</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectionSort</span><span class="params">(<span class="keyword">int</span> a[])</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> min = <span class="number">0</span>, temp = <span class="number">0</span>;</div><div class="line">    <span class="comment">//进行n次扫描</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</div><div class="line">        min = i;</div><div class="line">        <span class="comment">//每一次扫描取出待排序中最小的元素</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; a.length; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (a[min] &gt; a[j]) &#123;</div><div class="line">                min = j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//将该最小的元素放到待排序序列的第一个位置</span></div><div class="line">        <span class="keyword">if</span> (min != i) &#123;</div><div class="line">            temp = a[min];</div><div class="line">            a[min] = a[i];</div><div class="line">            a[i] = temp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</blockquote>
<h5 id="3-3-算法分析"><a href="#3-3-算法分析" class="headerlink" title="3.3 算法分析"></a>3.3 算法分析</h5><p><strong>时间复杂度</strong>： O(n^2)<br><strong>最坏情况</strong>：O(n^2)<br><strong>空间复杂度</strong>：O(1)<br><strong>不稳定</strong></p>
<h3 id="4-堆排序"><a href="#4-堆排序" class="headerlink" title="4 堆排序"></a>4 堆排序</h3><p>以大根堆为例：</p>
<h5 id="4-1-思路"><a href="#4-1-思路" class="headerlink" title="4.1 思路"></a>4.1 思路</h5><blockquote>
<ol>
<li>将一个无序数列建成一个初始堆</li>
<li>输出堆顶元素并调整剩余元素成为一个新堆</li>
<li>重复1和2，则最终按顺序输出的数列即为排好序的数列</li>
</ol>
</blockquote>
<h6 id="4-2-构建初始堆"><a href="#4-2-构建初始堆" class="headerlink" title="4.2 构建初始堆"></a>4.2 构建初始堆</h6><ol>
<li>首先数列构造一个完全二叉树。  </li>
<li>n为下标，从0开始。则最后一个非叶节点下标x是[n/2]向下取整，故从x处从后往前进行调整。  </li>
<li>每次比较父节点、左孩子、右孩子，将最小的孩子与父节点交换。</li>
<li>每次交换后需对被交换的孩子节点进行调整  </li>
</ol>
<h5 id="4-3-Java实现"><a href="#4-3-Java实现" class="headerlink" title="4.3 Java实现"></a>4.3 Java实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">/**</span></div><div class="line">     * 调整堆，使满足堆的定义。此例为大根堆</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> a          待排序的数组</div><div class="line">     * <span class="doctag">@param</span> startIndex 待调整堆的开始下标</div><div class="line">     * <span class="doctag">@param</span> endIndex   待调整堆的结束下标</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapAdjust</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> startIndex, <span class="keyword">int</span> endIndex)</span> </span>&#123;</div><div class="line">        <span class="comment">//start和end分别为【初始下标】和【结束下标】</span></div><div class="line">        <span class="keyword">int</span> temp;</div><div class="line">        <span class="keyword">int</span> i;</div><div class="line">        <span class="keyword">for</span> (; <span class="number">2</span> * startIndex + <span class="number">1</span> &lt;= endIndex; startIndex = i) &#123;</div><div class="line">            i = <span class="number">2</span> * startIndex + <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (i &lt; endIndex &amp;&amp; a[i] &lt; a[i + <span class="number">1</span>]) &#123;</div><div class="line">                i++;  <span class="comment">//i为较大孩子节点的下标</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (a[startIndex] &lt; a[i]) &#123; <span class="comment">//左右孩子中获胜者与父亲比较</span></div><div class="line">                <span class="comment">//将孩子结点上位，则以孩子结点的位置进行下一轮的筛选</span></div><div class="line">                temp = a[startIndex];</div><div class="line">                a[startIndex] = a[i];</div><div class="line">                a[i] = temp;</div><div class="line"><span class="comment">//                start = i;</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//因为整棵树是从下往上调整数，所以，若父节点不需要调整，说明该节点子树已满足堆性质，跳出循环</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 堆排序</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> a 待排序的数组</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span> a[])</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = a.length / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;   <span class="comment">//从最后一个非叶节点开始，建立初始堆</span></div><div class="line">            heapAdjust(a, i, a.length - <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//进行排序</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = a.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; --i) &#123;</div><div class="line">            <span class="comment">//将待排序区最后一个元素和第一个元素进行交换</span></div><div class="line">            <span class="keyword">int</span> temp = a[i];</div><div class="line">            a[i] = a[<span class="number">0</span>];</div><div class="line">            a[<span class="number">0</span>] = temp;</div><div class="line">            <span class="comment">//将剩下的无序元素调整为大顶堆</span></div><div class="line">            heapAdjust(a, <span class="number">0</span>, i - <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h5 id="4-4-算法分析"><a href="#4-4-算法分析" class="headerlink" title="4.4 算法分析"></a>4.4 算法分析</h5><p><strong>时间复杂度</strong>： O(nlogn)<br><strong>最坏情况</strong>：O(nlogn)<br><strong>空间复杂度</strong>：O(1)<br><strong>不稳定</strong></p>
<blockquote>
<p><strong>堆排序方法对记录数较少的文件并不值得提倡，但对n较大的文件还是很有效的</strong>。因为其运行时间主要耗费在建初始堆和调整建新堆时进行的反复“筛选”上。<br>堆排序在最坏的情况下，其时间复杂度也为O(nlogn)。相对于快速排序来说，这是堆排序的最大优点。此外，堆排序仅需一个记录大小的供交换用的辅助存储空间。</p>
</blockquote>
<h3 id="5-直接插入排序"><a href="#5-直接插入排序" class="headerlink" title="5 直接插入排序"></a>5 直接插入排序</h3><h5 id="5-1-思路"><a href="#5-1-思路" class="headerlink" title="5.1 思路"></a>5.1 思路</h5><ol>
<li>从第一个元素开始，该元素可以认为已经被排序</li>
<li>取出下一个元素，在已经排序的元素序列中从后向前扫描</li>
<li>如果该元素（已排序）大于新元素，将该元素移到下一位置</li>
<li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</li>
<li>将新元素插入到下一位置中</li>
<li>重复步骤2~5<h5 id="5-2-Java实现"><a href="#5-2-Java实现" class="headerlink" title="5.2 Java实现"></a>5.2 Java实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 直接插入排序</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> a 待排序的数组</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertionSort</span><span class="params">(<span class="keyword">int</span> a[])</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> temp;</div><div class="line">    <span class="keyword">int</span> j;</div><div class="line">    <span class="comment">//遍历数组</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; a.length; i++) &#123;</div><div class="line">        temp = a[i]; <span class="comment">//将待排序的第一个元素放到监视哨中，作为要插入的数</span></div><div class="line">        j = i - <span class="number">1</span>;  <span class="comment">//从后往前开始查找的位置j</span></div><div class="line">        <span class="keyword">while</span> (j &gt; -<span class="number">1</span> &amp;&amp; temp &lt; a[j]) &#123;</div><div class="line">            a[j + <span class="number">1</span>] = a[j];    <span class="comment">//将大于该数的右移</span></div><div class="line">            j--;</div><div class="line">        &#125;</div><div class="line">        a[j + <span class="number">1</span>] = temp;    <span class="comment">//最终找到插入位置为j+1</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h5 id="5-3-算法分析"><a href="#5-3-算法分析" class="headerlink" title="5.3 算法分析"></a>5.3 算法分析</h5><p>感觉直接插入排序的移动次数太多，效率也不高<br><strong>时间复杂度</strong>： O(n^2)<br><strong>最坏情况</strong>：O(n^2)<br><strong>最好</strong>： O(n)<br><strong>空间复杂度</strong>：O(1)<br><strong>稳定</strong></p>
<h3 id="6-希尔（shell）排序"><a href="#6-希尔（shell）排序" class="headerlink" title="6 希尔（shell）排序"></a>6 希尔（shell）排序</h3><h5 id="6-1-思路"><a href="#6-1-思路" class="headerlink" title="6.1 思路"></a>6.1 思路</h5><blockquote>
<ol>
<li>先取一个正整数d1&lt;n，把所有序号相隔d1的数组元素放一组，组内进行<strong>直接插入排序</strong></li>
<li>然后取d2&lt;d1，重复上述分组和排序操作</li>
<li>直至di=1，即所有记录放进一个组中排序为止<h5 id="6-2-Java实现"><a href="#6-2-Java实现" class="headerlink" title="6.2 Java实现"></a>6.2 Java实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 希尔排序，步长依次为 n/2,n/4,.....</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> a 待排序的数组</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span> a[])</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> d = a.length / <span class="number">2</span>; <span class="comment">//初始步长</span></div><div class="line">    <span class="keyword">while</span> (d &gt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; d; x++) &#123;   <span class="comment">//一共有x组</span></div><div class="line">            <span class="comment">//对每一组进行直接插入排序</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = x + d; i &lt; a.length; i += d) &#123;</div><div class="line">                <span class="keyword">int</span> temp = a[i];</div><div class="line">                <span class="keyword">int</span> j = i - d;</div><div class="line">                <span class="keyword">while</span> (j &gt; x - <span class="number">1</span> &amp;&amp; temp &lt; a[j]) &#123;</div><div class="line">                    a[j + d] = a[j];</div><div class="line">                    j -= d;</div><div class="line">                &#125;</div><div class="line">                a[j + d] = temp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        d = d / <span class="number">2</span>;  <span class="comment">//缩短步长</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
<h5 id="6-3-算法分析"><a href="#6-3-算法分析" class="headerlink" title="6.3 算法分析"></a>6.3 算法分析</h5><p><strong>时间复杂度</strong>： O(n^1.3)<br><strong>最坏情况</strong>：O(n^2)<br><strong>最好</strong>： O(n)<br><strong>空间复杂度</strong>：O(1)<br><strong>不稳定</strong></p>
<h3 id="7-归并排序"><a href="#7-归并排序" class="headerlink" title="7 归并排序"></a>7 归并排序</h3><h5 id="7-1-思路"><a href="#7-1-思路" class="headerlink" title="7.1 思路"></a>7.1 思路</h5><blockquote>
<ol>
<li>将序列每相邻两个数字进行归并操作（merge)，形成floor(n/2)个序列，排序后每个序列包含两个元素  </li>
<li>将上述序列再次归并，形成floor(n/4)个序列，每个序列包含四个元素  </li>
<li>重复步骤2，直到所有元素排序完毕<br><strong>&lt; 超优美的递归 &gt;</strong></li>
</ol>
<p>如:<br>设有数列{6，202，100，301，38，8，1}<br>初始状态：6，202，100，301，38，8，1<br>第一次归并后：{6，202}，{100，301}，{8，38}，{1}，比较次数：3；<br>第二次归并后：{6，100，202，301}，{1，8，38}，比较次数：4；<br>第三次归并后：{1，6，8，38，100，202，301}，比较次数：4；<br>总的比较次数为：3+4+4=11，<br>逆序数为14。</p>
<h5 id="7-2-Java实现"><a href="#7-2-Java实现" class="headerlink" title="7.2 Java实现"></a>7.2 Java实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 二路归并</div><div class="line"> * <span class="doctag">@param</span> a 要归并的数组</div><div class="line"> * <span class="doctag">@param</span> startIndex 要归并数组的起始下标-即第一个子序列的开始下标</div><div class="line"> * <span class="doctag">@param</span> midIndex 要归并数组的中点下标-即第二个子序列的开始下标</div><div class="line"> * <span class="doctag">@param</span> endIndex 要归并数组的终点下标</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> startIndex, <span class="keyword">int</span> midIndex, <span class="keyword">int</span> endIndex)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> i = startIndex; <span class="comment">//第一个序列的下标</span></div><div class="line">    <span class="keyword">int</span> j = midIndex +<span class="number">1</span>;<span class="comment">//第二个序列的下标</span></div><div class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;   <span class="comment">// k是临时数组的下标</span></div><div class="line">    <span class="keyword">int</span> [] array = <span class="keyword">new</span> <span class="keyword">int</span>[endIndex-startIndex+<span class="number">1</span>]; <span class="comment">//临时合并数组</span></div><div class="line">    <span class="comment">//每次取出两个序列中的小者，将其放到合并数组中（两个子序列已时排好序的）</span></div><div class="line">    <span class="keyword">while</span>(i&lt;=midIndex &amp;&amp; j&lt;=endIndex)&#123;</div><div class="line">        <span class="keyword">if</span>(a[i]&lt;=a[j])&#123;</div><div class="line">            array[k] = a[i];</div><div class="line">            i++;k++;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            array[k]=a[j];</div><div class="line">            j++;k++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//若第一个序列没扫描完，则将其全部复制到合并数组</span></div><div class="line">    <span class="keyword">while</span> (i&lt;=midIndex)&#123;</div><div class="line">        array[k] = a[i];</div><div class="line">        i++;k++;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//若第二个序列没扫描完，则将其全部复制到合并数组</span></div><div class="line">    <span class="keyword">while</span> (j&lt;=endIndex)&#123;</div><div class="line">        array[k] = a[j];</div><div class="line">        j++;k++;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//将合并数组复制到原序列中</span></div><div class="line">    <span class="keyword">for</span>(k=<span class="number">0</span>,i=startIndex;i&lt;=endIndex;i++,k++)&#123;</div><div class="line">        a[i] = array[k];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 归并排序，内部使用递归，太优美了</div><div class="line"> * <span class="doctag">@param</span> a 要排序的数组</div><div class="line"> * <span class="doctag">@param</span> startIndex 要排序的起始下标</div><div class="line"> * <span class="doctag">@param</span> endIndex 要排序的终点下标</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> startIndex, <span class="keyword">int</span> endIndex)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> midIndex;</div><div class="line">    <span class="keyword">if</span>(startIndex &lt; endIndex)&#123;</div><div class="line">        midIndex = (startIndex+endIndex)/<span class="number">2</span>;</div><div class="line">        mergeSort(a, startIndex, midIndex);</div><div class="line">        mergeSort(a, midIndex+<span class="number">1</span>, endIndex);</div><div class="line">        merge(a,startIndex,midIndex,endIndex);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</blockquote>
<h5 id="7-3-算法分析"><a href="#7-3-算法分析" class="headerlink" title="7.3 算法分析"></a>7.3 算法分析</h5><p><strong>时间复杂度</strong>： O(nlogn)<br><strong>最坏情况</strong>：O(nlogn)<br><strong>最好</strong>： O(nlogn)<br><strong>空间复杂度</strong>：O(n)<br><strong>稳定</strong></p>
<h2 id="gt-归并排序需要一个数组保存结果，所以辅助存储为O-n-。是空间复杂度最高的排序。"><a href="#gt-归并排序需要一个数组保存结果，所以辅助存储为O-n-。是空间复杂度最高的排序。" class="headerlink" title="&gt; 归并排序需要一个数组保存结果，所以辅助存储为O(n)。是空间复杂度最高的排序。"></a>&gt; 归并排序需要一个数组保存结果，所以辅助存储为O(n)。是空间复杂度最高的排序。</h2><p><strong><em>以上所有，都应深深地印在脑子里。  </em></strong></p>
<p><img src="http://obmxnha1c.bkt.clouddn.com/21457204_1326898064RUxx.jpg" alt="Untitled Image"><br><strong>*图上有错</strong>：归并排序需要一个数组保存结果，所以辅助存储为O(n)*  </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于数据结构的小知识]]></title>
      <url>http://www.bluestroy.com/2016/09/15/%E5%85%B3%E4%BA%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E5%B0%8F%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<h4 id="二叉树的深度和高度"><a href="#二叉树的深度和高度" class="headerlink" title="二叉树的深度和高度"></a>二叉树的深度和高度</h4><blockquote>
<p>树的深度是从根节点开始（其深度为1）自顶向下逐层累加的，而高度是从叶节点开始（其高度为1）自底向上逐层累加的。  </p>
</blockquote>
<p>二叉树的深度h即为二叉树的层数，二叉树最多含有节点数为 2^h-1。<br>第i层节点数： 2^(i-1)  <a id="more"></a></p>
<h4 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h4><blockquote>
<p>它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。  </p>
</blockquote>
<h4 id="完全二叉树："><a href="#完全二叉树：" class="headerlink" title="完全二叉树："></a>完全二叉树：</h4><blockquote>
<p>只有最下面两层节点度能够小于2，并且最下面一层的节点都集中在该层最左边的若干位置的二叉树。</p>
</blockquote>
<p><strong><em>树的高度为 logN+1向下取整。当使用二分搜索时，比较的次数即为数的高度。</em></strong>  </p>
<p>若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h 层所有的结点都连续集中在最左边，这就是<strong>完全二叉树</strong>。  </p>
<h4 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h4><blockquote>
<p>除叶子节点外的所有节点均有两个子节点，即节点数达到最大值。 2^h-1   </p>
</blockquote>
<p><strong>叶子数：</strong> 2^(h-1)<br><strong>第k层节点数：</strong> 2^(k-1)<br><strong>总结点数：</strong> 2^k-1</p>
<h4 id="二叉排序树（二叉查找树、二叉搜索树）"><a href="#二叉排序树（二叉查找树、二叉搜索树）" class="headerlink" title="二叉排序树（二叉查找树、二叉搜索树）"></a>二叉排序树（二叉查找树、二叉搜索树）</h4><blockquote>
<p>二叉排序树或者是一棵空树，或者是具有下列性质的二叉树：<br>（1）若左子树不空，则左子树上所有结点的值均小于它的根结点的值；<br>（2）若右子树不空，则右子树上所有结点的值均大于它的根结点的值；<br>（3）左、右子树也分别为二叉排序树；<br>（4）没有键值相等的结点。</p>
<div align="center"><br><img src="http://obmxnha1c.bkt.clouddn.com/94cad1c8a786c9179df9bed6c93d70cf3ac75763.jpg" width="300" height="180" align="center"><br></div>

</blockquote>
<h4 id="哈夫曼树（最优二叉树）"><a href="#哈夫曼树（最优二叉树）" class="headerlink" title="哈夫曼树（最优二叉树）"></a>哈夫曼树（最优二叉树）</h4><blockquote>
<p>带权路径长度最短的二叉树。  </p>
</blockquote>
<p><strong>节点的带权路径长度：</strong> 从根结点到该结点之间的路径长度与该结点的权的乘积  </p>
<p><strong>树的带权路径长度：</strong> 所有<strong><em>叶子结点</em></strong>的带权路径长度之和，记为WPL</p>
<h6 id="哈夫曼编码步骤"><a href="#哈夫曼编码步骤" class="headerlink" title="哈夫曼编码步骤"></a>哈夫曼编码步骤</h6><blockquote>
<p>一、对给定的n个权值{W1,W2,W3,…,Wi,…,Wn}构成n棵二叉树的初始集合F= {T1,T2,T3,…,Ti,…,Tn}，其中每棵二叉树Ti中只有一个权值为Wi的根结点，它的左右子树均为空。（为方便在计算机上实现算 法，一般还要求以Ti的权值Wi的升序排列。）<br>二、在F中选取两棵根结点权值最小的树作为新构造的二叉树的左右子树，新二叉树的根结点的权值为其左右子树的根结点的权值之和。<br>三、从F中删除这两棵树，并把这棵新的二叉树同样以升序排列加入到集合F中。<br>四、重复二和三两步，直到集合F中只有一棵二叉树为止。</p>
</blockquote>
<h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><p>Ki(i从0开始）。 则Ki的左孩子为K(2i+1)，右孩子K(2i+2)。父节点为Parent(i)=K[(i-1)/2]  </p>
<p><strong>小根堆：</strong> K[i]&lt;=K[2i+1] &amp;&amp; K[i]&lt;=K[2i+2]<br><strong>大根堆：</strong> K[i]&gt;=K[2i+1] &amp;&amp; K[i]&gt;=K[2i+2]  </p>
<p>空间复杂度：O(1)，建堆复杂度O(n)，调整堆的复杂度O(nlogn)</p>
<h4 id="各种排序算法复杂度"><a href="#各种排序算法复杂度" class="headerlink" title="各种排序算法复杂度"></a>各种排序算法复杂度</h4><p><img src="http://blog.chinaunix.net/attachment/201201/18/21457204_1326898064RUxx.jpg" alt="各种排序算法复杂度"></p>
<h4 id="死锁的4个必要条件"><a href="#死锁的4个必要条件" class="headerlink" title="死锁的4个必要条件"></a>死锁的4个必要条件</h4><p>（1） 互斥条件：一个资源每次只能被一个进程使用。<br>（2） 请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。<br>（3） 不可抢占（不剥夺）条件：进程已获得的资源，在末使用完之前，不能强行剥夺。<br>（4） 循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。  </p>
<h4 id="标准的SQL解析顺序"><a href="#标准的SQL解析顺序" class="headerlink" title="标准的SQL解析顺序"></a>标准的SQL解析顺序</h4><p>(1).FROM 子句, 组装来自不同数据源的数据<br>(2).WHERE 子句, 基于指定的条件对记录进行筛选<br>(3).GROUP BY 子句, 将数据划分为多个分组<br>(4).使用聚合函数进行计算<br>(5).使用 HAVING 子句筛选分组<br>(6).计算Select所有的表达式<br>(7).使用 ORDER BY 对结果集进行排序  </p>
<h4 id="简述abstract-类和interface的区别"><a href="#简述abstract-类和interface的区别" class="headerlink" title="简述abstract 类和interface的区别"></a>简述abstract 类和interface的区别</h4><p><strong>同</strong>： abstract类 和接口都可以有abstract方法<br><strong>不同</strong>：  </p>
<ol>
<li>接口中只可以有常量，不能有变量；而abstract类中既可以有常量也可以有变量  </li>
<li>abstract类也可以有非abstract方法，接口不可以。  </li>
<li>实现接口是一定要实现接口里定义的所有方法，而实现抽象类可以有选择的重写需要用到的方法。  </li>
<li>接口是公开的，里面不能有私有的方法和变量。而抽象类是可以有私有方法和私有变量的。  </li>
<li>Java抽象类可以提供某些方法的部分实现，而Java接口不可以（就是interface中只能定义方法，而不能有方法的实现，而在abstract class中则可以既有方法的具体实现，又有具体实现的抽象方法）  </li>
<li>子类只能单继承抽象类；而子类能够同时实现多个接口</li>
</ol>
<h4 id="java中对象什么时候被垃圾回收"><a href="#java中对象什么时候被垃圾回收" class="headerlink" title="java中对象什么时候被垃圾回收"></a>java中对象什么时候被垃圾回收</h4><p>当没有任何对象的引用指向对象时，在一个不可预期的时间内对象才会被回收  </p>
<p>当对象的引用为空，当对象对当前使用这个对象的应用程序不可触及的时候，这个对象就可以被回收了。</p>
<blockquote>
<p>一个对象，可以有一个或多个引用变量指向它。当一个对象不再有任何一个引用变量指向它时，这个对象就被应用抛弃了。或者说，这个对象可以被垃圾回收机制回收了。这就是说，当不存在对某对象的任何引用时，就意味着，应用告诉JVM：我不要这个对象，你可以回收了。  </p>
<p>JVM的垃圾回收机制对堆空间做实时检测。当发现某对象的引用计数为0时，就将该对象列入待回收列表中。但是，并不是马上予以销毁</p>
</blockquote>
<h4 id="计算1！-2！-……-n-（最简单的单循环方法）"><a href="#计算1！-2！-……-n-（最简单的单循环方法）" class="headerlink" title="计算1！+2！+……+n!（最简单的单循环方法）"></a>计算1！+2！+……+n!（最简单的单循环方法）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> n;</div><div class="line">		<span class="keyword">long</span> sum =<span class="number">0</span>;</div><div class="line">		<span class="keyword">long</span> temp =<span class="number">1</span>;</div><div class="line">		Scanner cin = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">		n = cin.nextInt();</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>;i&lt;=n;i++)&#123;</div><div class="line">			temp*=i;	</div><div class="line">			sum+=temp;</div><div class="line">		&#125;</div><div class="line">		System.out.println(sum);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> s_id,c_id,score</div><div class="line"><span class="keyword">from</span> grade</div><div class="line"><span class="keyword">where</span> score&gt;<span class="number">80</span>;</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> s_name,c_id,score</div><div class="line"><span class="keyword">from</span> grade,student</div><div class="line"><span class="keyword">where</span> score&gt;<span class="number">80</span> <span class="keyword">and</span> grade.s_id = student.s_id;</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> s_name,c_name,score</div><div class="line"><span class="keyword">from</span> student,course,grade</div><div class="line"><span class="keyword">where</span> score <span class="keyword">is</span> <span class="literal">NULL</span> <span class="keyword">and</span> student.s_id = grade.s_id <span class="keyword">and</span> course.c_id = grade.c_id;</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> s_id</div><div class="line"><span class="keyword">from</span> grade </div><div class="line"><span class="keyword">where</span> <span class="keyword">min</span>(score) &gt;<span class="number">80</span></div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span> s_id;</div></pre></td></tr></table></figure>
<p>列出学生及格和不及格的科目数，栏位包括学生号、及格科目数、不及格科目数：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> a.s_id, <span class="keyword">count</span>(a), <span class="keyword">count</span>(b)</div><div class="line"><span class="keyword">from</span> grade <span class="keyword">as</span> a,</div><div class="line">	(<span class="keyword">select</span> s_id <span class="keyword">from</span> grade <span class="keyword">where</span> score &lt; <span class="number">60</span>) <span class="keyword">as</span> b </div><div class="line"><span class="keyword">where</span> a.score&gt;<span class="number">60</span> <span class="keyword">and</span> a.s_id = b.s_id </div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span> s_id;</div></pre></td></tr></table></figure></p>
<h4 id="Java单例模式"><a href="#Java单例模式" class="headerlink" title="Java单例模式"></a>Java单例模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 懒汉模式，线程不安全</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Singleton instance =<span class="keyword">null</span>;</div><div class="line">   	<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">    	<span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</div><div class="line">        	instance = <span class="keyword">new</span> Singleton();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//懒汉模式 线程安全</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance =<span class="keyword">null</span>;</div><div class="line">   	<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">    	<span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</div><div class="line">        	instance = <span class="keyword">new</span> Singleton();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//懒汉模式 线程安全优化</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance =<span class="keyword">null</span>;</div><div class="line">   	<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">    	<span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</div><div class="line">        	<span class="keyword">synchronized</span>(Singleton.class)&#123;</div><div class="line">            	<span class="keyword">if</span>(instance ==<span class="keyword">null</span>)&#123;</div><div class="line">                	instance = <span class="keyword">new</span> Singleton();</div><div class="line">            	&#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 饿汉模式，无线程安全问题</span></div><div class="line"> * 缺点是类一加载就实例化，提前占用系统资源。</div><div class="line"> * 但实际可能并没有用到</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</div><div class="line">   	<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> INSTANCE;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="在3亿个数中找出不重复的整数，假设电脑内存之后2G"><a href="#在3亿个数中找出不重复的整数，假设电脑内存之后2G" class="headerlink" title="在3亿个数中找出不重复的整数，假设电脑内存之后2G"></a>在3亿个数中找出不重复的整数，假设电脑内存之后2G</h4><p>待回答。</p>
<h4 id="http和https的区别"><a href="#http和https的区别" class="headerlink" title="http和https的区别"></a>http和https的区别</h4><blockquote>
<ol>
<li>https协议需要到ca申请证书，一般免费证书很少，需要交费。 </li>
<li>http是超文本传输协议，信息是明文传输，https 则是具有安全性的ssl加密传输协议  </li>
<li>http和https使用的是完全不同的连接方式用的端口也不一样,前者是80,后者是443。  </li>
<li>http的连接很简单,是无状态的  </li>
<li>HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议 要比http协议安全  </li>
</ol>
</blockquote>
<h4 id="数据库的并发控制"><a href="#数据库的并发控制" class="headerlink" title="数据库的并发控制"></a>数据库的并发控制</h4><p><strong>数据库的并发操作通常会带来3个问题：</strong></p>
<ol>
<li>丢失更新问题：两个事务的操作交错执行，引起数据不正确</li>
<li>读脏数据问题：另一个事务读了一个事务未提交的值</li>
<li>不可重复读问题：一个事务两次读A操作间隔中，另一事务改变了A，两次同一数据却读出了不同的值  </li>
</ol>
<p><em>脏数据：未提交的随后被撤销（Rollback）的数据。</em></p>
<blockquote>
<p>脏读就是指当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个被更新后的数据。  </p>
</blockquote>
<p><em>这些问题都可通过并发控制子系统解决。</em></p>
<p>基本锁有X锁，S锁和U锁。</p>
<h4 id="系统平均无故障时间——可靠性。X个9的含义"><a href="#系统平均无故障时间——可靠性。X个9的含义" class="headerlink" title="系统平均无故障时间——可靠性。X个9的含义"></a>系统平均无故障时间——可靠性。X个9的含义</h4><p><em>参考</em> <a href="http://blog.csdn.net/alonesword/article/details/21555745" target="_blank" rel="external">什么是“5个9”(99.999%)的可靠性？</a><br>例如：<br><strong>5个9</strong>：(1-99.999%)<em>365</em>24*60=5.26分钟，表示该软件系统在连续运行1年时间里最多可能的业务中断时间是5.26分钟。<br><br><br><br></p>
<p><em>你也许会不经意的发现，这篇文章对解决17招行笔试题很有帮助，那还不赶快打个赏！！</em>  </p>
<p><br><br><br></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux常用命令]]></title>
      <url>http://www.bluestroy.com/2016/09/12/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h3 id="一、crontab简介"><a href="#一、crontab简介" class="headerlink" title="一、crontab简介"></a>一、crontab简介</h3><p>crontab命令常见于Unix和类Unix系统中，用于设置周期性被执行的命令。该命令从标准输入设备读取指令，并将其存放在<code>crontab</code>文件中，以供之后读取和执行。 <a id="more"></a></p>
<h5 id="1、crontab调度文件规则"><a href="#1、crontab调度文件规则" class="headerlink" title="1、crontab调度文件规则"></a>1、crontab调度文件规则</h5><p>命令格式：<code>* * * * * command</code><br><strong>*</strong> 依次表示<strong>分钟、小时、日、月、星期</strong>  </p>
<ul>
<li>分钟——每小时的第几分钟执行，范围0~59  </li>
<li>小时——每日的第几个小时执行，范围0~23</li>
<li>日——每月的第几天执行，范围1~31  </li>
<li>月——每年你的第几月执行 ，范围1~12  </li>
<li>星期——每周的第几天执行，范围0~6  </li>
</ul>
<h5 id="2、crontab命令的例子"><a href="#2、crontab命令的例子" class="headerlink" title="2、crontab命令的例子"></a>2、crontab命令的例子</h5><p><strong>*</strong> 表示该范围内任意时候，如每分钟执行一次：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* * * * * date &gt; /home/mydate</div></pre></td></tr></table></figure>
<p>每天晚上11点到早上8点之间每两个小时，即早上八点 :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0 23-8/2 * * * date</div></pre></td></tr></table></figure></p>
<p>每两个小时：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0 */2 * * * date</div></pre></td></tr></table></figure></p>
<p>每个月的4号和每周的周一到周三的早上11点：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0 11 4 * mon-wed date</div></pre></td></tr></table></figure></p>
<p>每天18 : 00至23 : 00之间每隔30分钟重启apache：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0,30 18-23 * * * /usr/local/etc/rc.d/lighttpd restart</div></pre></td></tr></table></figure></p>
<h5 id="3、其他"><a href="#3、其他" class="headerlink" title="3、其他"></a>3、其他</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">crontab -r <span class="comment">#停止（即删除）所有任务（慎用）</span></div><div class="line">crontab <span class="_">-l</span> <span class="comment">#列出所有任务</span></div></pre></td></tr></table></figure>
<h3 id="二、文件中-atime-ctime-mtime简介"><a href="#二、文件中-atime-ctime-mtime简介" class="headerlink" title="二、文件中 -atime, -ctime, -mtime简介"></a>二、文件中 -atime, -ctime, -mtime简介</h3><ul>
<li>atime(Access time)，访问时间，如读取文件</li>
<li>ctime(Change time), 状态时间，如修改权限、属性、所有者</li>
<li>mtime(Modified time), 修改时间，文件内容修改的时间<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">find . -mtime +3 <span class="comment">#3天以前修改的文件(&gt;3)  </span></div><div class="line">find . -mtime -3 <span class="comment">#3天之内修改的文件(&lt;3)</span></div><div class="line">find . -mtime 1 <span class="comment">#距离当前时间24~24*2小时内修改的文件(即当前时间的“昨天内”）</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="三、-amin-cmin-mmin简介"><a href="#三、-amin-cmin-mmin简介" class="headerlink" title="三、-amin, -cmin, -mmin简介"></a>三、-amin, -cmin, -mmin简介</h3><p>与atime，ctime，mtime用法相同，只不过time表示天，min表示分钟</p>
<h3 id="四、history命令"><a href="#四、history命令" class="headerlink" title="四、history命令"></a>四、history命令</h3><p>显示最近使用的5个命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">history</span> 5</div></pre></td></tr></table></figure></p>
<p>执行历史编号为5的命令那个：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ !5</div></pre></td></tr></table></figure></p>
<p>执行最后一次以ls结尾的命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ !ls</div></pre></td></tr></table></figure></p>
<h3 id="五、为bash脚本设置别名"><a href="#五、为bash脚本设置别名" class="headerlink" title="五、为bash脚本设置别名"></a>五、为bash脚本设置别名</h3><p>修改<code>~/.bashrc</code>文件，该文件是登录用户的启动文件，能用作用户的全局设置。<br>假定在/opt/fashion/目录下编写了某一键部署的bash脚本命令文件<code>deploy.sh</code>，则在<code>~./bashrc</code>文件中添加如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alias go=&apos;/opt/fashion/deploy.sh&apos;</div></pre></td></tr></table></figure></p>
<p>那么在命令行中直接执行<code>go</code>命令即可执行<code>deploy.sh</code>文件中的命令。  </p>
<p>注意：编辑完后执行<code>source ./bashrc</code>命令使其生效，若不能生效则重新登录生效。  </p>
<h3 id="六、usermod将用户添加到用户组"><a href="#六、usermod将用户添加到用户组" class="headerlink" title="六、usermod将用户添加到用户组"></a>六、usermod将用户添加到用户组</h3><p>千万不能直接用 <code>usermode -G groupName userName</code>，这样做会使你离开其他用户组，仅仅作为用户组groupName的成员。<br>应该加上<code>-a</code>选项：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ usermod <span class="_">-a</span> -G sudo userName</div></pre></td></tr></table></figure></p>
<p>-a代表append，也就是将用户添加到用户组sudo中，而不必离开其他用户组。  </p>
<h3 id="七、head-和tail"><a href="#七、head-和tail" class="headerlink" title="七、head 和tail"></a>七、head 和tail</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">head -n 20 /etc/man.config <span class="comment">#列出前20行</span></div><div class="line">head -n -100 /etc/man.config <span class="comment">#列出除最后100行的之前的所有行  </span></div><div class="line">tail -n 20 /etc/ <span class="comment">#列出最后20行  </span></div><div class="line">tail -n +100 /etc/man.config <span class="comment">#列出除前100行的之后的所有行  </span></div><div class="line">head -n 20 /etc/man.config | tail -n 10 <span class="comment">#显示第11到20行</span></div></pre></td></tr></table></figure>
<h3 id="八、Linux层级目录结构"><a href="#八、Linux层级目录结构" class="headerlink" title="八、Linux层级目录结构"></a>八、Linux层级目录结构</h3><ul>
<li>/  根目录</li>
</ul>
<ol>
<li>/root存放root用户的相关文件</li>
<li>/home 存放普通用户的相关文件</li>
<li>/bin 存放常用命令的文件 。系统的一些指令</li>
<li>/sbin 具有一定权限才可以使用的命令。超级用户指令、系统管理指令</li>
<li>/mnt 默认挂载光驱和软驱的目录</li>
<li>/boot 存放引导相关的文件</li>
<li>/etc 存放配置相关的文件</li>
<li>/var 存放经常变化的文件</li>
<li>/usr 安装程序的默认安装文件夹</li>
</ol>
<ul>
<li>/usr/bin  后期安装的一些软件的运行脚本</li>
<li>/usr/sbin 超级用户的一些管理程序</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux中mysql数据库定时备份]]></title>
      <url>http://www.bluestroy.com/2016/09/12/Linux%E4%B8%ADmysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BD/</url>
      <content type="html"><![CDATA[<h4 id="Linux中，为mysql数据库备份，并删除一个月以前的备份数据"><a href="#Linux中，为mysql数据库备份，并删除一个月以前的备份数据" class="headerlink" title="Linux中，为mysql数据库备份，并删除一个月以前的备份数据"></a>Linux中，为mysql数据库备份，并删除一个月以前的备份数据</h4><p>mysql_backup.sh备份脚本命令如下：</p>
<pre><code class="bash"><span class="meta">#! /bin/bash</span>
<span class="comment"># 按照时间戳来命名备份数据，便于管理</span>
DATE=`date+%Y-%m-%d-%H:%M:%S`  
mysqldump -u root -p123456 mysqldbName &gt; /mysql_backup/backdata/mysqldbName_<span class="variable">${DATE}</span>.bak  
<span class="comment"># 删除30天以前的备份数据</span>
find /mysql_backup/backdata/ -atime +30 | xargs rm
</code></pre>
<a id="more"></a> 
<p>其中root是mysql用户，123456是用户密码，msyqldbName是数据库名字，该备份命令会将mysqldbName数据库的数据全部备份到/mysql<em>backup/backdata目录下，并以mysqldbName\</em>加上时间戳的形式命名。 </p>
<h4 id="crontab定时备份任务"><a href="#crontab定时备份任务" class="headerlink" title="crontab定时备份任务"></a>crontab定时备份任务</h4><p>将mysql_backup.sh脚本文件的执行加入到crontab定时任务中，编辑crontab定时任务:</p>
<pre><code class="bash">$ crontab <span class="_">-e</span>
</code></pre>
<p>将一下内容追加到crontab文件中：</p>
<pre><code class="bash">0 12 * * * /mysql_backup/mysql_backup.sh
0 0 * * * /mysql_backup/mysql_backup.sh
</code></pre>
<p>第一行内容表示每天中午12点执行mysql_backup.sh中的备份命令，第二行表示每天凌晨执行备份命令。你可以在任意时候执行备份命令，只需要学习一下crontab的 <em> </em> <em> </em> * 分别代表什么意思就可以。  </p>
<h4 id="mysql数据库恢复备份数据"><a href="#mysql数据库恢复备份数据" class="headerlink" title="mysql数据库恢复备份数据"></a>mysql数据库恢复备份数据</h4><pre><code class="bash">$ mysql -u root -p123456 mysqldbName &lt; /mysql_backup/backdata/mysqldbName_xxxxxx.bak
</code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java实现通过smtp服务器验证邮箱的真实有效性]]></title>
      <url>http://www.bluestroy.com/2016/09/10/Java%E5%AE%9E%E7%8E%B0%E9%80%9A%E8%BF%87smtp%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%AA%8C%E8%AF%81%E9%82%AE%E7%AE%B1%E7%9A%84%E7%9C%9F%E5%AE%9E%E6%9C%89%E6%95%88%E6%80%A7/</url>
      <content type="html"><![CDATA[<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>设置一个已有邮箱地址，通过向邮箱服务器发送一个请求，去与目标邮箱地址通信，根据邮箱服务器的返回结果来判断目标邮箱地址是否是真实有效的邮箱。  <a id="more"></a></p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul>
<li>该程序要用到commons-net-3.3.jar、dnsjava-2.1.7.jar包</li>
<li>大部分的国内常见邮箱都能准确验证</li>
<li>验证频率和数量多的话容易被封掉ip</li>
<li>使用了”no-reply@domain.com”作为发送邮箱，不要用自己使用的邮箱作为程序的发送邮箱，验证频率和数量多的话邮箱地址容易被封  </li>
</ul>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><pre><code class="java"><span class="keyword">package</span> com.tieniu;
<span class="keyword">import</span> java.io.IOException;

<span class="keyword">import</span> org.apache.commons.net.smtp.SMTPClient;
<span class="keyword">import</span> org.apache.commons.net.smtp.SMTPReply;
<span class="keyword">import</span> org.xbill.DNS.Lookup;
<span class="keyword">import</span> org.xbill.DNS.MXRecord;
<span class="keyword">import</span> org.xbill.DNS.Record;
<span class="keyword">import</span> org.xbill.DNS.Type;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckEmail</span> </span>{

    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SENDER_EMAIL = <span class="string">"no-reply@domain.com"</span>;<span class="comment">//"no-reply@domain.com";</span>
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SENDER_EMAIL_SERVER = SENDER_EMAIL.split(<span class="string">"@"</span>)[<span class="number">1</span>];<span class="comment">//"domain.com";</span>


    <span class="comment">/**
     * 
     * <span class="doctag">@param</span> email  The recipient's email address, it need to be validate if it is real exists or doesn't exists.
     * <span class="doctag">@return</span> True if email is real exists, false if not.
     */</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkEmailMethod</span><span class="params">(String email)</span> </span>{
        <span class="keyword">if</span> (!email.matches(<span class="string">"[\\w\\.\\-]+@([\\w\\-]+\\.)+[\\w\\-]+"</span>)) {
            System.err.println(<span class="string">"Format error"</span>);
            <span class="keyword">return</span> <span class="keyword">false</span>;
        }

        String log = <span class="string">""</span>;
        String host = <span class="string">""</span>;
        String hostName = email.split(<span class="string">"@"</span>)[<span class="number">1</span>];
        Record[] result = <span class="keyword">null</span>;
        SMTPClient client = <span class="keyword">new</span> SMTPClient();
        client.setConnectTimeout(<span class="number">8000</span>);  <span class="comment">//设置连接超时时间,有些服务器比较慢</span>

        <span class="keyword">try</span> {
            <span class="comment">// 查找MX记录</span>
            Lookup lookup = <span class="keyword">new</span> Lookup(hostName, Type.MX);
            lookup.run();
            <span class="keyword">if</span> (lookup.getResult() != Lookup.SUCCESSFUL) {
                log += <span class="string">"找不到MX记录\n"</span>;
                <span class="keyword">return</span> <span class="keyword">false</span>;
            } <span class="keyword">else</span> {
                result = lookup.getAnswers();
            }
<span class="comment">/*
             if(result.length &gt; 1) { // 优先级排序
                    List&lt;Record&gt; arrRecords = new ArrayList&lt;Record&gt;();
                    Collections.addAll(arrRecords, result);
                    Collections.sort(arrRecords, new Comparator&lt;Record&gt;() {

                        public int compare(Record o1, Record o2) {
                            return new CompareToBuilder().append(((MXRecord)o1).getPriority(), ((MXRecord)o2).getPriority()).toComparison();
                        }

                    });
                    host = ((MXRecord)arrRecords.get(0)).getTarget().toString();
                }
 * 
 */</span>
            <span class="comment">// 连接到邮箱服务器</span>

            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.length; i++) {
                System.out.println(result[i].getAdditionalName().toString());
                System.out.println(((MXRecord)result[i]).getPriority());
            }
            <span class="keyword">int</span> count=<span class="number">0</span>;  
<span class="comment">//            String tempLog ="";</span>
            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.length; i++) {
                log=<span class="string">""</span>;
                host = result[i].getAdditionalName().toString();
                <span class="keyword">try</span>{
                    client.connect(host);    <span class="comment">//连接到接收邮箱地址的邮箱服务器</span>
                }<span class="keyword">catch</span>(Exception e){        <span class="comment">//捕捉连接超时的抛出的异常</span>
                    count++;
                    <span class="keyword">if</span>(count&gt;=result.length){    <span class="comment">//如果由MX得到的result服务器都连接不上，则认定email无效</span>
                        log +=<span class="string">"Connect mail server timeout...\n"</span>;
                        <span class="keyword">return</span> <span class="keyword">false</span>;
                    }
                }

                <span class="keyword">if</span> (!SMTPReply.isPositiveCompletion(client.getReplyCode())) {    <span class="comment">//服务器通信不成功</span>
                    client.disconnect();
                    <span class="keyword">continue</span>;
                } <span class="keyword">else</span> {
                    log += <span class="string">"MX record about "</span> + hostName + <span class="string">" exists.\n"</span>;
                    log += <span class="string">"Connection succeeded to "</span> + host + <span class="string">"\n"</span>;
                    log += client.getReplyString();

                    <span class="comment">// HELO &lt;$SENDER_EMAIL_SERVER&gt;   //domain.com</span>
                    <span class="keyword">try</span>{
                        client.login(SENDER_EMAIL_SERVER);   <span class="comment">//这一步可能会出现空指针异常</span>
                    }<span class="keyword">catch</span>(Exception e){
                        <span class="keyword">return</span> <span class="keyword">false</span>;
                    }
                    log += <span class="string">"&gt;HELO "</span>+SENDER_EMAIL_SERVER+<span class="string">"\n"</span>;
                    log += <span class="string">"="</span> + client.getReplyString();

                    client.setSender(SENDER_EMAIL);
                    <span class="keyword">if</span>(client.getReplyCode()!=<span class="number">250</span>){        <span class="comment">//为解决hotmail有的MX可能出现=550 OU-001 (SNT004-MC1F43) Unfortunately, messages from 116.246.2.245 weren't sent.</span>
                        client.disconnect();
                        <span class="keyword">continue</span>;                            <span class="comment">//把client.login 和client.setSender放在循环体内，这样所有的如果某mx不行就换其他mx，但这样会对无效的邮箱进行所有mx遍历，耗时</span>
                    }
                    log += <span class="string">"&gt;MAIL FROM: &lt;"</span>+SENDER_EMAIL+<span class="string">"&gt;\n"</span>;
                    log += <span class="string">"="</span> + client.getReplyString();
                    <span class="comment">// RCPT TO: &lt;$email&gt;</span>
                    <span class="keyword">try</span>{
                        client.addRecipient(email);
                    }<span class="keyword">catch</span>(Exception e){
                        <span class="keyword">return</span> <span class="keyword">false</span>;
                    }
                    log += <span class="string">"&gt;RCPT TO: &lt;"</span> + email + <span class="string">"&gt;\n"</span>;
                    log += <span class="string">"="</span> + client.getReplyString();

                    <span class="comment">//最后从收件邮箱服务器返回true，说明服务器中能够找到此收件地址，邮箱有效</span>
                    <span class="keyword">if</span> (<span class="number">250</span> == client.getReplyCode()) {
                        <span class="keyword">return</span> <span class="keyword">true</span>;
                    }
                    client.disconnect();

                }
            }
<span class="comment">//            log+=tempLog;</span>
<span class="comment">//            log += "&gt;MAIL FROM: &lt;"+SENDER_EMAIL+"&gt;\n";</span>
<span class="comment">//            log += "=" + client.getReplyString();</span>
<span class="comment">//            </span>
<span class="comment">//            // RCPT TO: &lt;$email&gt;</span>
<span class="comment">//            try{</span>
<span class="comment">//                client.addRecipient(email);</span>
<span class="comment">//            }catch(Exception e){</span>
<span class="comment">//                return false;</span>
<span class="comment">//            }</span>
<span class="comment">//            log += "&gt;RCPT TO: &lt;" + email + "&gt;\n";</span>
<span class="comment">//            log += "=" + client.getReplyString();</span>
<span class="comment">//            </span>
<span class="comment">//            //最后从收件邮箱服务器返回true，说明服务器中能够找到此收件地址，邮箱有效</span>
<span class="comment">//            if (250 == client.getReplyCode()) {</span>
<span class="comment">//                return true;</span>
<span class="comment">//            }</span>
        } <span class="keyword">catch</span> (Exception e) {
            e.printStackTrace();
        } <span class="keyword">finally</span> {
            <span class="keyword">try</span> {
                client.disconnect();
            } <span class="keyword">catch</span> (IOException e) {
            }
            <span class="comment">// print log</span>
            System.out.println(log);
        }
        <span class="keyword">return</span> <span class="keyword">false</span>;
    }

    <span class="comment">/**
     * This method is more accurate than checkEmailMethod(String email);
     * 
     * <span class="doctag">@param</span> email  The recipient's email address, it need to be validate if it is real exists or doesn't exists.
     * <span class="doctag">@return</span> True if email is real exists, false if not.
     */</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkEmail</span><span class="params">(String email)</span></span>{
        <span class="keyword">if</span>(email.split(<span class="string">"@"</span>)[<span class="number">1</span>].equals(<span class="string">"qq.com"</span>)){
            <span class="keyword">if</span>( checkEmailMethod(email) &amp;&amp; checkEmailMethod(email) &amp;&amp; checkEmailMethod(email)){
                <span class="keyword">return</span> <span class="keyword">true</span>;
            }<span class="keyword">else</span>{
                <span class="keyword">return</span> <span class="keyword">false</span>;
            }
        }
        <span class="keyword">return</span> checkEmailMethod(email);
    }
    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{
        CheckEmail ce = <span class="keyword">new</span> CheckEmail();
        <span class="keyword">if</span>(ce.checkEmail(<span class="string">"dfdegcex@qq.com"</span>)){
            System.out.println(<span class="string">"true"</span>);
        }<span class="keyword">else</span>{
            System.out.println(<span class="string">"false"</span>);
        }
    }

}
</code></pre>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>其中还写了一点开发过程中的相关文档，生成了该功能相应的jar包。也生成了dll，写了供C#调用的使用方法。很简单。这里附上相关文件的链接：<a href="http://pan.baidu.com/s/1jHpdDjC" target="_blank" rel="external">http://pan.baidu.com/s/1jHpdDjC</a> &nbsp;&nbsp;密码：wio6</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java实现将选择题题库按照字母顺序重新排列]]></title>
      <url>http://www.bluestroy.com/2016/09/10/Java%E5%AE%9E%E7%8E%B0%E5%B0%86%E9%80%89%E6%8B%A9%E9%A2%98%E9%A2%98%E5%BA%93%E6%8C%89%E7%85%A7%E5%AD%97%E6%AF%8D%E9%A1%BA%E5%BA%8F%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>记</strong>：若有开卷考试，且只能带纸质题库，而选择题题库又特别多，那么就可以用此方法将题库按照字母顺序排列，便于查找定位。  </p>
</blockquote>
<h3 id="巧用TreeMap"><a href="#巧用TreeMap" class="headerlink" title="巧用TreeMap"></a>巧用TreeMap</h3><p>Java中的Map是用来存储键值对的，其中HashMap没有固定的排列顺序，是通过hashcode对其内容进行快速查找。而TreeMap是由红黑树算法实现的，TreeMap在保存元素是按照key值的顺序排好序的。如果你需要得到一个有序的结果就应该使用TreeMap。TreeMap在不指定排序器时，默认按照key值进行升序排序。  <a id="more"></a></p>
<p>本方法需要先将题库拷贝到txt文本中（注意txt中\r\n表示一个换行符），取<strong>每道题去掉题号之后的第一行内容作为key，整个题目的内容作为value</strong>，则遍历完所有的题库并将其保存到TreeMap后，TreeMap中的题目就已经是按照A-Za-z的字母顺序排列了(key是字符串的话按照第一个字母的ASCII升序)，将其输出即可。  （A-65，a-97）</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>很简单，一看就懂。  </p>
<pre><code class="java"><span class="keyword">import</span> java.io.*;
<span class="keyword">import</span> java.util.HashMap;
<span class="keyword">import</span> java.util.Iterator;
<span class="keyword">import</span> java.util.TreeMap;
<span class="comment">/*
将选择题题库按照字母顺序重新排列
若有开卷考试，使用排序后的题库进行查找岂不是非常方便。
*/</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{

    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> IOException</span>{
        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"tiku.txt"</span>));
        BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"tiku_sort.txt"</span>));
        TreeMap&lt;String, String&gt; map = <span class="keyword">new</span> TreeMap&lt;&gt;();
        String s, content = <span class="string">""</span>, key = <span class="string">""</span>;
        s = in.readLine();
        <span class="keyword">int</span> length;
        <span class="keyword">int</span> maxNumber = <span class="number">6</span>;      <span class="comment">//表示一共有多少到题，最大的题号</span>
        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= maxNumber; i++) {
            <span class="keyword">if</span> (s != <span class="keyword">null</span> &amp;&amp; s.startsWith(String.valueOf(i))) {
                key = <span class="string">""</span>;
                content = s + <span class="string">"\r\n"</span>;        <span class="comment">//在txt中\r\n表示一个换行符</span>
                <span class="keyword">if</span> (i &lt; <span class="number">10</span>) {
                    length = <span class="number">2</span>;                <span class="comment">//length表示除题号和.之外的内容开始的下标，用于后面key截取字符串的开始位置</span>
                }
                <span class="keyword">else</span> <span class="keyword">if</span> (i &lt; <span class="number">100</span>) {
                    length = <span class="number">3</span>;
                }
                <span class="keyword">else</span> {
                    length = <span class="number">4</span>;
                }
                key = s.substring(length).replaceAll(<span class="string">" "</span>, <span class="string">""</span>).toLowerCase();    <span class="comment">//将每个题的第一行（去除题号后)作为key，用于排序</span>
                <span class="comment">//System.out.println(key+"-----------");</span>
            }
            <span class="comment">//将一道题的整个内容放入content</span>
            s = in.readLine();
            <span class="keyword">while</span> (s != <span class="keyword">null</span> &amp;&amp; !s.startsWith(String.valueOf((<span class="keyword">int</span>)(i+<span class="number">1</span>)))) {    <span class="comment">//因为题库都是按顺序的，所有这样写（i+1)</span>
                content += s + <span class="string">"\r\n"</span>;
                s = in.readLine();
            }
            <span class="comment">//TreeMap会自动按照键值进行排序建树</span>
            map.put(key, content);
        }

        <span class="comment">//整棵树的内容写到一个新的文件中。新的文件是按字母顺序排列（旧的文件按照题号排序）</span>
        Iterator&lt;String&gt; keys = map.keySet().iterator();
        <span class="keyword">while</span> (keys.hasNext()) {
            key = keys.next();
            content = map.get(key);
            out.write(content);
        }
        <span class="keyword">try</span>{
            in.close();
            out.close();
        }<span class="keyword">catch</span>(Exception e){}

    }
}
</code></pre>
<h3 id="样例输入与输出"><a href="#样例输入与输出" class="headerlink" title="样例输入与输出"></a>样例输入与输出</h3><p><b>1. 样例输入：  </b></p>
<blockquote>
<ol>
<li>d a respon…What.. this behavior?<br>A) Compare the conten…<br>B) Refer to the con…<br>C) Compare the contents of..<br>D) Refer to the ale..  </li>
<li>you decided to…lause? (Choose three.)<br>A. ALL<br>B. PFILE<br>C. BOTH<br>D. NONE  </li>
<li>efine aue… the event?<br>A) the alert.log file<br>B) the DBA_ALERTS view<br>C) the Database Control Home page<br>D) the Database Control performance page<br>E) the Database Control Maintenance page  </li>
</ol>
</blockquote>
<p><b>2. 样例输出： </b></p>
<blockquote>
<ol>
<li>d a respon…What.. this behavior?<br>A) Compare the conten…<br>B) Refer to the con…<br>C) Compare the contents of..<br>D) Refer to the ale..  <ol>
<li>efine aue… the event?<br>A) the alert.log file<br>B) the DBA_ALERTS view<br>C) the Database Control Home page<br>D) the Database Control performance page<br>E) the Database Control Maintenance page</li>
<li>you decided to…lause? (Choose three.)<br>A. ALL<br>B. PFILE<br>C. BOTH<br>D. NONE  </li>
</ol>
</li>
</ol>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[树莓派装系统+远程登录]]></title>
      <url>http://www.bluestroy.com/2016/09/10/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%A3%85%E7%B3%BB%E7%BB%9F-%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>——树莓派？好吃吗？<br>——Yes, It’s delicious, but for programer!  <a id="more"></a></p>
</blockquote>
<p>树莓派（Raspberry Pi)是只有信用卡卡片大小的微型电脑，系统基于Linux。吃货们要注意了，它是一台电脑，麻雀虽小，五脏可是俱全呢，树莓派是众多计算机发烧友和创客的玩具（价格二三百块钱），你可以用它做出很多令人惊喜而好玩的东西。  </p>
<p>废话不多说了，当你买来树莓派时，它还是一个裸机，需要你给它装系统。  </p>
<h2 id="树莓派装系统"><a href="#树莓派装系统" class="headerlink" title="树莓派装系统"></a>树莓派装系统</h2><ol>
<li>下载2015-05-05-raspbian-wheezy树莓派系统镜像文件</li>
<li>树莓派用SD卡来充当硬盘，用卡器将SD卡连接电脑，使用Win32DiskImager软件把系统镜像文件烧录到SD卡上</li>
<li>然后将SD卡插到树莓派上，把树莓派接通电源，树莓派即启动了。  </li>
</ol>
<p>很简单就将树莓派系统装好了。树莓派启动时，红灯亮、绿灯闪烁，当绿灯常亮时即启动成功。</p>
<blockquote>
<p>一开始因为不是很懂，进入系统后操作失误，后来又重装了系统。<br><strong>注意： </strong>重装系统时要先使用<strong>SDFormatterv4</strong>软件对SD卡进行格式化，如果直接<code>右键-&gt;格式化</code>的话很可能SD的容量没有完全释放掉，格式化后只显示很小的容量。  </p>
</blockquote>
<h2 id="树莓派远程登录"><a href="#树莓派远程登录" class="headerlink" title="树莓派远程登录"></a>树莓派远程登录</h2><p>如果有显示器和HDMI连接线，是可以直接将树莓派连接到显示其上使用的。这里讲一下没有的话要如何远程登录树莓派。</p>
<h3 id="1、获取树莓派的IP地址"><a href="#1、获取树莓派的IP地址" class="headerlink" title="1、获取树莓派的IP地址"></a>1、获取树莓派的IP地址</h3><p><strong>要远程登录树莓派首先要知道树莓派的IP地址：</strong><br>首先将网线插入树莓派，然后使用<strong>Advanced Ip Scanner</strong>软件进行Ip扫描，可以扫描出连接到当前局域网的所有设备。可以看到制造商为<strong>Raspberry Pi Foundation</strong>的设备就是树莓派，IP地址为10.199.157.36，听说树莓派的MAC 地址前几个数是固定的，也可通过Mac地址判断。如果连接的设备较多，可以根据自己的笔记本IP大概判断一下树莓派的IP，然后在软件的输入框中输入IP段范围，可以找的快一点。<br><img src="http://obmxnha1c.bkt.clouddn.com/20151012213447693.jpg" alt="Untitled Image">  </p>
<h3 id="2、使用Win7自带的mstsc远程登录"><a href="#2、使用Win7自带的mstsc远程登录" class="headerlink" title="2、使用Win7自带的mstsc远程登录"></a>2、使用Win7自带的mstsc远程登录</h3><p><code>开始 -&gt; 输入 mstsc</code>，弹出桌面远程连接，输入树莓派的ip地址后点击连接，就可以登录到树莓派系统了，中间要输入树莓派的账密，<code>默认账号：pi 密码：raspberry</code> 。下面是登录后的样子：<br><img src="http://obmxnha1c.bkt.clouddn.com/20151012214540119.jpg" alt="Untitled Image">  </p>
<h3 id="3、其他技巧"><a href="#3、其他技巧" class="headerlink" title="3、其他技巧"></a>3、其他技巧</h3><ul>
<li>我试了一下远程登录可以好几台电脑同时远程登录树莓派，互相之间操作的结果会同步，但其他人的操作动作不可见  </li>
<li>mstsc远程登录可以使用<code>ctrl+alt+Break</code>快捷键进行全盘切换，当键盘不灵时也可以切换一下就可以了</li>
<li>另外：也可以用<strong>ssh+putty</strong>进行远程登录  </li>
</ul>
<h2 id="树莓派无线网卡配置"><a href="#树莓派无线网卡配置" class="headerlink" title="树莓派无线网卡配置"></a>树莓派无线网卡配置</h2><p>如果是连接的路由器的wifi的话，这个百度经验上有，自行百度。<br><strong>注意</strong>：如果无线网卡配置信息过时或错误，同时插上无线网卡和网线远程登录可能会有问题，也可能上不了网，这个时候把无线网卡拔掉，直插网线就好。<br>【配置没成功，待定】</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux Makefile文件编译错误——make-Nothing to be done for 'all']]></title>
      <url>http://www.bluestroy.com/2016/09/10/Linux%20Makefile%E6%96%87%E4%BB%B6%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF%E2%80%94%E2%80%94make-Nothing%20to%20be%20done%20for%20'all'/</url>
      <content type="html"><![CDATA[<h4 id="错误出现"><a href="#错误出现" class="headerlink" title="错误出现"></a>错误出现</h4><p>在Linux操作系统中使用Makefile时，Makefile内容如下：  <a id="more"></a></p>
<p><img src="http://obmxnha1c.bkt.clouddn.com/20160102232834116.png" alt="Untitled Image"></p>
<p>然后make进行编译，出现如下错误：make： Nothing to be done for ‘all’  </p>
<p><img src="http://obmxnha1c.bkt.clouddn.com/20160102232950093.png" alt="Untitled Image">  </p>
<p>在网上查了半天找不到解决方法，网上大多是转来转去的同一个说法。</p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>Makefile文件中只能使用Tab，不能使用多个空格。这个Makefile文件的内容是复制来的，所以图片上白色高亮区域是多个空格，把它变为一个tab就可以了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo如何打多个标签？]]></title>
      <url>http://www.bluestroy.com/2016/08/10/hexo%E5%A6%82%E4%BD%95%E6%89%93%E5%A4%9A%E4%B8%AA%E6%A0%87%E7%AD%BE%EF%BC%9F/</url>
      <content type="html"><![CDATA[<blockquote>
<p><em>问题非常简单，但却困扰了我很久，也许是编辑器的坑。</em></p>
</blockquote>
<pre><code>tags:  
    - hexo
    - tag1
    - tag2
categories: hexo
</code></pre><p><strong>问题描述：</strong><br>用的是hexo next主题，编辑器用的WordMark。也许是编辑器的原因，当我写完第一个标签hexo时，按回车，光标自动跟第一个标签对齐，然后继续写标签，导致多标签失败。  <a id="more"></a></p>
<p><strong>解决：</strong><br>上述方法写标签时，第二个tag和第三个tag前面是四个空格，改成一个<code>Tab</code>就可以了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://www.bluestroy.com/2016/08/08/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<a id="more"></a> 
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
